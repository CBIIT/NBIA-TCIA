<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright SAIC, Ellumen and RSNA (CTP)


   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/national-biomedical-image-archive/LICENSE.txt for details.
L-->

<project name="ctp-installer"
         basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <import file="ctp-macrodefs.xml"/>

  <target name="common:ctp:init"
          depends="common:common:init:pre"
          unless="exclude.ctp">

    <fail unless="application.base.path"/>

    <property name="ctp.server.home" value="${application.base.path}/CTP-server"/>
    <property name="ctp.client.home" value="${application.base.path}/CTP-client"/>
    <basename property="ctp.server.home.dirname" file="${ctp.server.home}"/>
    <basename property="ctp.client.home.dirname" file="${ctp.client.home}"/>
    <property name="deployed.nbia.jar" location="${ctp.server.home}/CTP/libraries/nbia.jar"/>
  </target>

  <target name="install:ctp:server:post" unless="exclude.ctp">

    <ctp-create-change-logs/>
    <delete dir="${ctp.server.home}/config" quiet="true" />

  </target>

  <target name="install:ctp:server:clean"
          unless="exclude.ctp">
    <fail unless="application.base.path"/>
    <echoproperties/>

    <property name="backup.ctp.server.base.dir" location="${application.base.path}/backup/ctp-server"/>

    <echo>FOO ${backup.ctp.server.base.dir}</echo>
   <!-- <ctp-backup/> -->

  </target>

  <target name="install:ctp:client:post" unless="exclude.ctp">

    <ctp-create-change-logs ctp.home="${ctp.client.home}"
                            exclude.backup="${exclude.ctp.client.backup}"
                            backup.ctp.base.dir="${backup.ctp.client.base.dir}"
                            ctp.home.dirname="${ctp.client.home.dirname}"/>
    <delete dir="${ctp.client.home}/config" quiet="true" />                            
  </target>


  <target name="install:ctp:client:clean"
          unless="exclude.ctp-client">
    <fail unless="application.base.path"/>


    <property name="backup.ctp.client.base.dir" location="${application.base.path}/backup/ctp-client"/>

    <ctp-backup ctp.home="${ctp.client.home}"
                exclude.backup="${exclude.ctp.client.backup}"
                backup.ctp.base.dir="${backup.ctp.client.base.dir}"
                server.or.client="client"/>
  </target>

  <target name="install:ctp:stop" unless="exclude.ctp">

    <echo>Stopping CTP server...</echo>

    <ctp-shutdown hostAndPort="localhost:${ctp.server.port}"
                  adminPassword="${ctp.server.king.password}"/>

  </target>


  <target name="install:ctp:server:start" unless="exclude.ctp">
    <if>
      <not>
        <isset property="exclude.start.servers"/>
      </not>
      <then>
        <echo>Starting CTP server...</echo>

        <exec dir="${ctp.server.home}/CTP"
              executable="${ctp.server.home}/CTP/ctp.sh"
              failonerror="false"
              spawn="true"
              osfamily="unix"/>


        <exec dir="${ctp.server.home}/CTP"
              executable="${common.lib.dir}/psexec.exe"
              failonerror="false"
              spawn="true"
              osfamily="windows">
          <arg line="-d -i -w &quot;${ctp.server.home}/CTP&quot;  &quot;${ctp.server.home}/CTP/ctp.bat&quot;" />
        </exec>

      </then>
    </if>
  </target>

  <target name="install:ctp:client:start" unless="exclude.ctp-client">
  <!--
    dont bother
    -->
  </target>



  <target name="install:ctp:server:binaries" unless="exclude.ctp">

  	<if>
  	  <available file="../target/dist/exploded/${nbia-ctp.dist.relative.dir}/" type="dir" />
  	  <then>
  	    <unjar src="../target/dist/exploded/${nbia-ctp.dist.relative.dir}/CTP-installer.jar"
  	           dest="${ctp.server.home}"/>
  	  </then>
  	  <else>
  	    <unjar src="${nbia-ctp.dist.relative.dir}/CTP-installer.jar"
  	           dest="${ctp.server.home}"/>
  	  </else>
  	</if>
    <!-- after unzipping CTP, move the users.xml back on top -->
    <if>
      <isset property="ctp.server.exists"/>
      <then>
        <copy todir="${ctp.server.home}/CTP"
              file="${application.base.path}/backup/ctp-server/users.xml"
              overwrite="true"/>
        <delete dir="${application.base.path}/backup/ctp-server/users.xml"/>
      </then>
    </if>


    <delete dir="${ctp.server.home}/org"/>
    <delete dir="${ctp.server.home}/META-INF"/>
    <mkdir dir="${ctp.server.home}/CTP/logs"/>

    <!-- for default index dir -->
    <mkdir dir="${ctp.server.home}/CTP/index"/>
    <mkdir dir="${ctp.server.storage_service.index}"/>
  </target>

  <target name="install:ctp:client:binaries" unless="exclude.ctp-client">

  	<if>
  	  <available file="../target/dist/exploded/" type="dir" />
  	  <then>
  	    <unjar src="../target/dist/exploded/${nbia-ctp.dist.relative.dir}/CTP-installer.jar"
  	           dest="${ctp.client.home}"/>
  	  </then>
  	  <else>
  	    <unjar src="${nbia-ctp.dist.relative.dir}/CTP-installer.jar"
  	           dest="${ctp.client.home}"/>
  	  </else>
  	</if>


    <!-- after unzipping CTP, move the users.xml back on top -->
    <if>
      <isset property="ctp.client.exists"/>
      <then>
        <copy todir="${ctp.client.home}/CTP"
              file="${application.base.path}/backup/ctp-client/users.xml"
              overwrite="true"/>
        <delete dir="${application.base.path}/backup/ctp-client/users.xml"/>
      </then>
    </if>


    <delete dir="${ctp.client.home}/org"/>
    <delete dir="${ctp.client.home}/META-INF"/>
    <mkdir dir="${ctp.client.home}/CTP/logs"/>

    <create-ctp-client-startup-scripts/>
  </target>



  <target name="install:ctp:server:patchdb" depends="install:ctp:server:binaries" unless="exclude.ctp">
    <copy file="${deployed.nbia.jar}" tofile="${deployed.nbia.jar}.orig"/>


    <mkdir dir="${ctp.server.home}/CTP/nbia_jar_tmp"/>
    <unjar src="${deployed.nbia.jar}"
           dest="${ctp.server.home}/CTP/nbia_jar_tmp"/>
    <delete file="${deployed.nbia.jar}"/>


    <replaceregexp file="${ctp.server.home}/CTP/nbia_jar_tmp/hibernate.properties"
                   byline="true"
                   match="^\s*hibernate.connection.url\s+(.*)$"
                   replace="hibernate.connection.url ${database.url}"/>
    <replaceregexp file="${ctp.server.home}/CTP/nbia_jar_tmp/hibernate.properties"
                   byline="true"
                   match="^\s*hibernate.connection.username\s+(.*)$"
                   replace="hibernate.connection.username ${database.user}"/>
    <replaceregexp file="${ctp.server.home}/CTP/nbia_jar_tmp/hibernate.properties"
                   byline="true"
                   match="^\s*hibernate.connection.password\s+(.*)$"
                   replace="hibernate.connection.password ${database.password}"/>
    <replaceregexp file="${ctp.server.home}/CTP/nbia_jar_tmp/hibernate.properties"
                   byline="true"
                   match="^\s*hibernate.connection.driver_class\s+(.*)$"
                   replace="hibernate.connection.driver_class ${database.driver}"/>
    <replaceregexp file="${ctp.server.home}/CTP/nbia_jar_tmp/hibernate.properties"
                   byline="true"
                   match="^\s*hibernate.dialect\s+(.*)$"
                   replace="hibernate.dialect ${database.dialect}"/>

    <jar jarfile="${deployed.nbia.jar}"
         compress="false">
      <fileset dir="${ctp.server.home}/CTP/nbia_jar_tmp">
        <include name="*/**" />
      </fileset>
    </jar>

    <delete dir="${ctp.server.home}/CTP/nbia_jar_tmp"/>
  </target>

  <target name="install:ctp:server:configure" unless="exclude.ctp">

    <ctp-configure/>

    <xmltask source="${ctp.server.home}/CTP/config.xml"
             dest="${ctp.server.home}/CTP/config.xml">
      <!-- no xmlcatalog necessary -->
      <replace path="//Server/@port"
               withtext="${ctp.server.port}" />
      <replace path="//ImportService/@requireAuthentication"
               withtext="${ctp.server.require_authentication}" />
      <replace path="//ImportService/@port"
               withtext="${ctp.server.http_import_service.port}" />
      <replace path="//StorageService/@root"
               withtext="${ctp.server.storage_service.root}" />
      <replace path="//StorageService/@index"
               withtext="${ctp.server.storage_service.index}" />
      <replace path="//ExportService[@adapterClass='gov.nih.nci.ncia.dbadapter.NCIADatabase']/@port"
               withtext="${ctp.server.verifier.port}" />
      <replace path="//ExportService[@adapterClass='gov.nih.nci.ncia.dbadapter.NCIADatabase']/@requireAuthentication"
               withtext="${ctp.server.require_authentication}" />
    </xmltask>

    <prettify-xml in.xml.file="${ctp.server.home}/CTP/config.xml"
                  out.xml.file="${ctp.server.home}/CTP/config.xml.out"/>
    <move file="${ctp.server.home}/CTP/config.xml"
          tofile="${ctp.server.home}/CTP/config.xml.unpretty"/>
    <move file="${ctp.server.home}/CTP/config.xml.out"
          tofile="${ctp.server.home}/CTP/config.xml"/>
    <copy file="${working.dir}/common/resources/ctp/server/Launcher.properties"
              todir="${ctp.server.home}/CTP" overwrite="true" >
    </copy>

    <chmod dir="${ctp.server.home}/CTP" perm="ugo+rx" includes="**/*.sh, **/*.bat"/>
  </target>

  <target name="install:ctp:client:configure" unless="exclude.ctp-client">

    <ctp-configure ctp.home="${ctp.client.home}"
                   king.password="${ctp.client.king.password}"
                   admin.password="${ctp.client.admin.password}"
                   ctp.resources.relative.dir="client"/>

    <ctp-client-configure/>

  </target>


  <target name="install:ctp:filesender" unless="exclude.ctp-client">


  	<if>
  	  <available file="../${nbia-ctp.dist.relative.dir}/FileSender" type="dir" />
  	  <then>
  	    <copy todir="${ctp.client.home}/FileSender">
  	      <fileset dir="../${nbia-ctp.dist.relative.dir}/FileSender"/>
  	    </copy>
  	  </then>
  	  <else>
  	    <copy todir="${ctp.client.home}/FileSender">
  	      <fileset dir="${nbia-ctp.dist.relative.dir}/FileSender"/>
  	    </copy>
  	  </else>
  	</if>
    <configure-filesender/>
  </target>




  <target name="install:ctp"
          depends="common:ctp:init,
                   common:common:init,
                   install:ctp:client,
                   install:ctp:server"
          unless="exclude.ctp"/>

  <target name="upgrade:ctp"
          depends="common:ctp:init,
                   common:common:init,
                   upgrade:ctp:client,
                   upgrade:ctp:server"
          unless="exclude.ctp"/>

  <target name="upgrade:ctp:client"
          unless="exclude.ctp-client"
          depends="common:common:init,
                   common:ctp:init,
                   upgrade:ctp:client:readers:custom,
                   install:ctp:stop,
                   install:ctp:client:clean,
                   install:ctp:client:binaries,
                   install:ctp:client:configure,
                   install:ctp:client:start,
                   install:ctp:filesender"/>

  <!-- copy over all the contents of the server.
       leave out the install:clean which will wipe out service directories
       created through prior usage -->
  <target name="upgrade:ctp:server"
          unless="exclude.ctp"
          depends="common:common:init,
                   common:ctp:init,
                   upgrade:ctp:server:readers:custom,
                   install:ctp:stop,
                   install:ctp:server:clean,
                   install:ctp:server:binaries,
                   install:ctp:server:configure,
                   install:ctp:server:patchdb,
                   install:ctp:server:post,
                   install:ctp:server:start"/>


  <target name="install:ctp:validate-ports-preinstall"
          unless="exclude.ctp">
    <!--
    <validate-ports-preinstall validation.pre.port.list="${ctp.server.port},${ctp.server.http_import_service.port}"/>
      -->
  </target>

  <target name="install:ctp:server"
          unless="exclude.ctp"
    depends="common:common:init,
             common:ctp:init,
             install:ctp:stop,
             install:ctp:validate-ports-preinstall,
             install:ctp:server:clean,
             install:ctp:server:binaries,
             install:ctp:server:configure,
             install:ctp:server:patchdb,
             install:ctp:server:post,
             install:ctp:server:start" />

  <target name="install:ctp:client"
          unless="exclude.ctp-client"
    depends="common:common:init,
             common:ctp:init,
             install:ctp:stop,
             install:ctp:validate-ports-preinstall,
             install:ctp:client:clean,
             install:ctp:client:binaries,
             install:ctp:client:configure,
             install:ctp:client:start,
             install:ctp:client:post,
             install:ctp:filesender" />




  <target name="upgrade:ctp:readers"
          depends="common:ctp:init,
                   upgrade:ctp:server:readers:custom,
                   upgrade:ctp:client:readers:custom"
          unless="exclude.ctp"/>

  <target name="upgrade:ctp:server:readers:custom"
          unless="exclude.ctp">
    <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->

    <!-- begin read ctp stuff -->
    <ctp-read-password ctp.password.file="${ctp.server.home}/CTP/users.xml"
                       ctp.password.property.name="ctp.server.admin.password" />
    <ctp-read-password ctp.password.file="${ctp.server.home}/CTP/users.xml"
                       ctp.password.property.name="ctp.server.king.password" />
    <ctp-read-server-config/>

    <!-- end read ctp stuff -->
  </target>


  <target name="upgrade:ctp:client:readers:custom"
          unless="exclude.ctp-client">
    <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->

    <!-- begin read ctp stuff -->

    <ctp-read-password ctp.password.file="${ctp.client.home}/CTP/users.xml"
                       ctp.password.property.name="ctp.client.admin.password" />
    <ctp-read-password ctp.password.file="${ctp.client.home}/CTP/users.xml"
                       ctp.password.property.name="ctp.client.king.password" />
    <ctp-read-client-config/>
    <!-- end read ctp stuff -->
  </target>
</project>
