<?xml version="1.0" encoding="utf-8"?>
<!--L
   Copyright SAIC, Ellumen and RSNA (CTP)

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/national-biomedical-image-archive/LICENSE.txt for details.
L-->
<!--need to define GLOBUS_LOCATION -->
<project name="nbia" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		This is the master build file for the NBIA project.  NBIA web application, NBIA REST API and CTP
</description>
	<property name="project.name" value="nbia"/>
	<property name="nbia.build.file" value="build.xml"/>
	<property name="properties.file" value="defaultAHP3.properties"/>
	<property file="${properties.file}"/>
	<property name="build.dir" location="."/>
	<property name="software.dir" location=".."/>
	<property name="common.dir" location="${software.dir}/common"/>
	<property name="common.dist.relative.dir" value="common"/>
	<property name="common.lib.dir" location="${software.dir}/common/resources/lib"/>
	<property name="target.dir" location="${software.dir}/target"/>
	<property name="ivy.settings.dir" location="${common.dir}/ivy"/>
	<property name="lib.dir" location="${target.dir}/lib"/>
	<property name="temp.dir" location="${target.dir}/temp"/>
	<property name="dist.dir" location="${target.dir}/dist"/>
	<property name="common.resources.dir" location="${common.dir}/resources"/>
	<property name="nbia-dao.base.dir" value="${software.dir}/nbia-dao"/>
	<property name="nbia-ctp.base.dir" value="${software.dir}/nbia-ctp-working"/>
	<property name="nbia-services-commons.base.dir" value="${software.dir}/nbia-services-commons"/>
	<property name="nbia-domain.base.dir" value="${software.dir}/nbia-domain"/>
	<property name="nbia-util.base.dir" value="${software.dir}/nbia-util"/>
	<property name="nbia-web.base.dir" value="${software.dir}/nbia-web"/>
	<property name="nbia-api.base.dir" value="${software.dir}/nbia-api"/>
	<property name="nbia-auth.base.dir" value="${software.dir}/nbia-auth"/>
	<property name="nbia-uat.base.dir" value="${software.dir}/nbia-uat"/>
	<property name="nbia-uat.dist.dir" value="${nbia-uat.base.dir}/dist"/>	
	<property name="nbia-download-manager.base.dir" value="${software.dir}/nbia-download-manager"/>
	<property name="nbia-download.base.dir" value="${software.dir}/nbia-download"/>
	<property name="nbia-remote-search.base.dir" value="${software.dir}/nbia-remote-search"/>
	<property name="global.ivy.settings.file" location="${software.dir}/common/ivysettings.xml"/>
	<property name="db-install.src.dir" value="${common.dir}/resources/db/"/>
	<property name="db-upgrade.src.dir" value="${common.dir}/resources/db-incr/"/>
	<property name="nbia-resource.artifact.dir" value="${software.dir}/common/resources"/>
	<property name="dist.exploded.dir" value="${dist.dir}/exploded"/>
	<property name="tools.dist.relative.dir" value="tools"/>
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}"/>
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}"/>
	<property name="db-install.dist.dir" value="${dist.exploded.dir}/db/db-install/"/>
	<property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/db/db-upgrade/"/>
	<!--property name="db-upgrade.dist.dir" value="/tmp/ncia/nbia" /-->
	<property name="nbia-ctp.dist.relative.dir" value="nbia-ctp"/>
	<property name="nbia-ctp.dist.dir" value="${dist.exploded.dir}/${nbia-ctp.dist.relative.dir}"/>
	<property name="nbia-web.dist.relative.dir" value="nbia-wars"/>
	<property name="nbia-web.dist.dir" value="${dist.exploded.dir}/${nbia-web.dist.relative.dir}"/>
	<property name="working.dir" location="${target.dir}/working"/>
	<property name="db.dir.src" location="${basedir}/db"/>
	<property name="db.dir.dest" location="${working.dir}/db"/>
	<property name="download.dir" location="${target.dir}/download"/>
	<!--These properties are the list of files used by the install of the database for each type -->
	<property name="db.install.create.mysql.file.list" value="ncia_mysql_nodata.sql,nciaDbInit.sql"/>
	<property name="db.install.create.oracle.file.list" value="ddl.sql,dml_populate.sql,fk.sql"/>
	<!-- targets -->
	<property name="nbia-ctp.build.target" value="all"/>
	<property name="nbia-services-commons.build.target" value="run"/>
	<property name="nbia-dao.build.target" value="run"/>
	<property name="nbia-domain.build.target" value="all"/>
	<property name="nbia-web.build.target" value="run"/>
	<property name="nbia-api.build.target" value="run"/>
	<property name="nbia-auth.build.target" value="run"/>	
	<property name="nbia-download-manager.build.target" value="run"/>
	<property name="nbia-download.build.target" value="run"/>
	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install"/>
	<property name="upgrade.target" value="upgrade"/>
	<property name="ctp.install.target" value="install:ctp:server"/>
	<property name="ctp.upgrade.target" value="upgrade:ctp:server"/>
	<!-- output directory properties -->
	<property name="nbia-ctp.artifact.dir" value="${nbia-ctp.base.dir}/target"/>
	<!-- solr -->
	<property name="solr.dist.dir" value="${dist.exploded.dir}/${solr.dist.relative.dir}"/>
	<!-- Paths -->
	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="ivy-*.jar"/>
		</fileset>
	</path>
	<path id="common.lib.classpath">
		<fileset dir="${common.lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath refid="common.lib.classpath"/>
	</taskdef>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="common.lib.classpath"/>
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement path="${common.lib.dir}/xmltask-1.16.1.jar"/>
		</classpath>
	</taskdef>
	<taskdef name="svn" classpathref="common.lib.classpath" classname="org.tigris.subversion.svnant.SvnTask"/>
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${common.resources.dir}/lib/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${common.resources.dir}/lib/mysql-connector-java-5.1.13.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<default>
		</default>
	</switch>
	
<!-- target starts here -->
	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${temp.dir}"/>
		<delete dir="${lib.dir}"/>
		<delete dir="${download.dir}"/>
		<delete dir="${target.dir}"/>
	</target>
	
	<target name="ivy:clean">
		<echo message="Deleting ${user.home}/.ivy2-${ant.project.name}-nbia5"/>
		<delete dir="${user.home}/.ivy2-${ant.project.name}5"/>
	</target>
	
	<target name="init">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.exploded.dir}"/>
		<mkdir dir="${nbia-web.dist.dir}"/>
		<mkdir dir="${db-install.dist.dir}"/>
		<mkdir dir="${db-upgrade.dist.dir}"/>
		<mkdir dir="${tools.dist.dir}"/>
		<mkdir dir="${download.dir}"/>
		<mkdir dir="${lib.dir}"/>
	</target>
	
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		compute-tag-properties, build:nbia-web, dist:ctp-client, dist:ctp-server,dist:solr, build:nbia-api">
	</target>
	
	<target name="build:local:install" description="Deply the wars to local tomcat defined in buildAHP3.properties" depends="
		build:all">
		<copy todir="${application.base.path.windows}/apache-tomcat-7.0.68/webapps" overwrite="true">
			<fileset dir="${dist.exploded.dir}/nbia-wars">
				<include name="ncia.war"/>
				<include name="nbia-api.war"/>
				<include name="oviyam2.war"/>
				<include name="nbia-download.war"/>
			</fileset>
		</copy>
	</target>
	
	<target name="build:all:niams" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
			build:all, -branding">
	</target>
	
	<target name="build:nbia-domain" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-domain.build.target}" dir="${nbia-domain.base.dir}">
			<property name="project.name" value="${project.name}"/>
		</ant>
	</target>
	
	<target name="build:nbia-util" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="run" dir="${nbia-util.base.dir}">
			<property name="project.name" value="${project.name}"/>
		</ant>
	</target>
	
	<target name="build:nbia-dao" depends="init,
                                               build:nbia-util,
                                               build:nbia-domain">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-dao.build.target}" dir="${nbia-dao.base.dir}">
			<property name="database.driver" value="${database.driver}"/>
			<property name="database.dialect" value="${database.dialect}"/>
			<property name="application.context.name" value="${application.context.name}"/>
		</ant>
	</target>
	
	<!-- rewrite the code since github does not support $headURL$ so whenever to display tag in home page build with '-Dnbia_prod_build_tag=value' to diplay on home page -->
	<target name="compute-tag-properties">
		<if>
			<and>
				<isset property="nbia_prod_build_tag"/>
				<not>
					<equals arg1="${nbia_prod_build_tag}" arg2="master"/>
				</not>
			</and>
			<then>
				<property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag}"/>
				<echo message="!!!  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
			</then>
			<else>
				<property name="nbia_prod_build_tag.final" value="dev-snapshot ${DSTAMP} ${TSTAMP}"/>
				<echo message="!!!  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
			</else>
		</if>
		<echo message=" !!! final  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
	</target>
	
	<target name="build:nbia-ctp" depends="init,
                                         build:nbia-util,
                                         build:nbia-domain,
                                         compute-tag-properties">
		<!-- so we don't modify ncia-ctp directory and leave little pieces of poo that can be committed later by unsuspecting or uncaring people -->
		<mkdir dir="../nbia-ctp-working"/>
		<copy todir="../nbia-ctp-working">
			<fileset dir="../nbia-ctp"/>
		</copy>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-ctp.build.target}" dir="${nbia-ctp.base.dir}">
			<property name="project.name" value="${project.name}"/>
			<property name="nbia.version" value="${nbia.version}"/>
			<property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}"/>
			<property name="database.user" value="${database.user}"/>
			<property name="database.password" value="${database.password}"/>
			<property name="database.system.user" value="${database.system.user}"/>
			<property name="database.system.password" value="${database.system.password}"/>
			<property name="database.url" value="${database.url}"/>
			<property name="database.driver" value="${database.driver}"/>
			<property name="database.dialect" value="${database.dialect}"/>
			<property name="database.type" value="${database.type}"/>
		</ant>
		<mkdir dir="${nbia-ctp.dist.dir}"/>
		<copy todir="${nbia-ctp.dist.dir}">
			<fileset dir="${nbia-ctp.artifact.dir}">
				<include name="CTP-installer.jar"/>
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/FileSender">
			<fileset dir="${nbia-ctp.base.dir}/FileSender"/>
		</copy>
		<!--copy todir="${nbia-ctp.dist.dir}">
			<fileset file="${nbia-ctp.base.dir}/target/nbiaDatabaseUpdator.jar" />
		</copy>
		<copy file="${nbia-ctp.base.dir}/target/dbupdator.sh" todir="${nbia-ctp.dist.dir}"/-->
		<delete dir="../nbia-ctp-working"/>
	</target>
	
	<target name="dist:ctp-client" description="build and configure ctp client" depends="build:nbia-ctp">
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Client"/>
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Client/CTP/logs"/>
		<unjar src="${nbia-ctp.dist.dir}/CTP-installer.jar" dest="${nbia-ctp.dist.dir}/CTP_Client"/>
		<!-- copy common files to the client -->
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/CTP">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="ctp.*"/>
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/CTP/examples" overwrite="true">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="example*"/>
			</fileset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/users.xml" todir="${nbia-ctp.dist.dir}/CTP_Client/CTP">
			<filterset>
				<filter token="ctp.client.admin.username" value="${ctp.client.admin.username}"/>
				<filter token="ctp.client.admin.password" value="${ctp.client.admin.password}"/>
				<filter token="ctp.client.king.username" value="${ctp.client.king.username}"/>
				<filter token="ctp.client.king.password" value="${ctp.client.king.password}"/>
			</filterset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/config-block.xml" tofile="${nbia-ctp.dist.dir}/CTP_Client/CTP/config.xml">
			<filterset>
				<filter token="ctp.client.port" value="${ctp.client.port}"/>
				<filter token="ctp.client.http_import_service.port" value="${ctp.client.http_import_service.port}"/>
				<filter token="ctp.server.verifier.port" value="${ctp.server.verifier.port}"/>
				<filter token="ctp.server.http_import_service.port" value="${ctp.server.http_import_service.port}"/>
				<filter token="ctp.client.dicom_import_service.port" value="${ctp.client.dicom_import_service.port}"/>
				<filter token="ctp.client.exportService.username" value="${ctp.client.exportService.username}"/>
				<filter token="ctp.client.exportService.password" value="${ctp.client.exportService.password}"/>
			</filterset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/Launcher.properties" tofile="${nbia-ctp.dist.dir}/CTP_Client/CTP/Launcher.properties"/>	
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/org"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/META-INF"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/config"/>
		<!-- copy and configure FileSender files -->
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender">
			<fileset dir="${nbia-ctp.dist.dir}/FileSender"/>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="filesender.*"/>
			</fileset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/FileSender.properties" todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender" overwrite="Yes">
			<filterset>
				<filter token="ctp.client.http_import_service.port" value="${ctp.client.http_import_service.port}"/>
			</filterset>
		</copy>
		<!-- zip up -->
		<zip update="false" destfile="${nbia-ctp.dist.dir}/CTP_Client.zip">
			<zipfileset dir="${nbia-ctp.dist.dir}/CTP_Client/"/>
		</zip>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/"/>
		<delete dir="${nbia-ctp.dist.dir}/FileSender"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP-installer.jar"/>
	</target>
	
	<target name="dist:ctp-server" description="build and configure ctp server" depends="build:nbia-ctp">
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server"/>
		<unjar src="${nbia-ctp.dist.dir}/CTP-installer.jar" dest="${nbia-ctp.dist.dir}/CTP_Server"/>
		<!-- after unzipping CTP, move the users.xml back on top -->
		<copy file="${common.dir}/resources/ctp/server/users.xml" todir="${nbia-ctp.dist.dir}/CTP_Server/CTP">
			<filterset>
				<filter token="ctp.server.admin.username" value="${ctp.server.admin.username}"/>
				<filter token="ctp.server.admin.password" value="${ctp.server.admin.password}"/>
				<filter token="ctp.server.king.username" value="${ctp.server.king.username}"/>
				<filter token="ctp.server.king.password" value="${ctp.server.king.password}"/>
			</filterset>
		</copy>
		<copy file="${common.dir}/resources/ctp/server/Launcher.properties" todir="${nbia-ctp.dist.dir}/CTP_Server/CTP"/>
		<copy file="${common.dir}/resources/ctp/server/config-block.xml" tofile="${nbia-ctp.dist.dir}/CTP_Server/CTP/config.xml">
			<filterset>
				<filter token="ctp.server.port" value="${ctp.server.port}"/>
				<filter token="ctp.server.http_import_service.port" value="${ctp.server.http_import_service.port}"/>
				<filter token="ctp.server.require_authentication" value="${ctp.server.require_authentication}"/>
				<filter token="ctp.server.storage_service.root" value="${ctp.server.storage_service.root}"/>
				<filter token="ctp.server.storage_service.index" value="${ctp.server.storage_service.index}"/>
				<filter token="ctp.server.verifier.port" value="${ctp.server.verifier.port}"/>
			</filterset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Server/CTP">
			<fileset dir="${common.dir}/resources/ctp/server">
				<include name="ctp.*"/>
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Server/CTP/examples" overwrite="true">
			<fileset dir="${common.dir}/resources/ctp/server">
				<include name="example*"/>
			</fileset>
		</copy>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/org"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/META-INF"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/config"/>
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server/CTP/logs"/>
		<!-- for default index dir -->
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server/CTP/index"/>

		<zip update="false" destfile="${nbia-ctp.dist.dir}/CTP_Server.zip">
			<zipfileset dir="${nbia-ctp.dist.dir}/CTP_Server/"/>
		</zip>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/"/>
		<delete dir="${nbia-ctp.dist.dir}/FileSender"/>
		<delete dir="${nbia-ctp.dist.dir}/CTP-installer.jar"/>
	</target>
	
	<target name="build:nbia-services-commons" depends="init,
                                                      build:nbia-util,
                                                      build:nbia-dao">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-services-commons.build.target}" dir="${nbia-services-commons.base.dir}">
			<property name="project.name" value="${project.name}"/>
		</ant>
	</target>
	
	<target name="build:nbia-download" depends="init,
                   build:nbia-dao, build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-download.build.target}" dir="${nbia-download.base.dir}">
			<property name="project.name" value="${project.name}"/>
		</ant>
	</target>
	
	<target name="build:nbia-download-manager" depends="init,
                   build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-download-manager.build.target}" dir="${nbia-download-manager.base.dir}">
			<property name="project.name" value="${project.name}"/>
			<property name="jar-signing.keystore.location" value="${jar-signing.keystore.location}"/>
			<property name="jar-signing.keystore.password" value="${jar-signing.keystore.password}"/>
			<property name="jar-signing.keystore.alias" value="${jar-signing.keystore.alias}"/>
			<property name="jar-signing.execution.time" value="${jar-signing.execution.time}"/>
			<!-- Need absolution location, relative path would fail in sub-project since file would not exist -->
			<property name="jar-signing.keystore.abs-location" value="${jar-signing.keystore.abs-location}"/>
			<property name="gov.nih.nci.ncia.wiki.context.sensitive.help.url" value="${gov.nih.nci.ncia.wiki.context.sensitive.help.url}"/>
		</ant>
	</target>
	
	<target name="keygen">
		<sequential>
			<tstamp>
				<format property="install.time" pattern="yyyy-MM-dd-HH-mm-ss"/>
			</tstamp>
			<if>
				<equals arg1="${jar-signing.generate-selfsigned}" arg2="true"/>
				<then>
					<echo message="Generating self-signed certificate for use with jar signing."/>
					<if>
						<available file="${jar-signing.keystore.location}"/>
						<then>
							<move file="${jar-signing.keystore.location}" tofile="${jar-signing.keystore.location}-${install.time}"/>
						</then>
					</if>
					<genkey alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.location}" validity="1825">
						<dname>
							<param name="CN" value="${jar-signing.keystore.cert.cn}"/>
							<param name="OU" value="${jar-signing.keystore.cert.ou}"/>
							<param name="O" value="${jar-signing.keystore.cert.o}"/>
							<param name="C" value="${jar-signing.keystore.cert.c}"/>
						</dname>
					</genkey>
				</then>
				<else>
					<echo message="Using existing certificate for jar signing."/>
				</else>
			</if>
			<sequential>
				<if>
					<available file="${jar-signing.keystore.location}"/>
					<then>
						<echo message="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"/>
						<echo message="Found signing jar file at ${jar-signing.keystore.location}, validating."/>
						<basename file="${jar-signing.keystore.location}" property="jar-signing.keystore.file"/>
						<dirname file="${jar-signing.keystore.location}" property="jar-signing.keystore.dir"/>
					</then>
					<else>
						<echo message="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"/>
						<echo message="Signing jar file at${jar-signing.keystore.location} not found, skipping validation."/>
					</else>
				</if>
			</sequential>
		</sequential>
	</target>

	<target name="build:nbia-liquibase" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="run" dir="../nbia-liquibase">
			<property name="project.name" value="${project.name}"/>
		</ant>
	</target>
	
	<target name="build:nbia-web" depends="init,
                   build:nbia-services-commons,
		           build:nbia-download-manager,
                   build:nbia-download,
                   keygen">
		<copy todir="${target.dir}/dist/exploded/nbia-download-manager">
			<fileset dir="${lib.dir}/nbia-download-manager/runtime">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<echoproperties prefix="jar-signing"/>
		<if>
			<equals arg1="${jar-signing.execution.time}" arg2="build"/>
			<then>
				<!--unsignjar jar="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar"/-->
				<echo message="jar-signing.execution.time set to build, signing jars"/>
				<!--comma-separated-file-list directory.to.list="${target.dir}/dist/exploded/nbia-download-manager"
                                   property.name.to.set="jar-signing.jar.list"/-->
				<for param="jar">
					<path>
						<fileset dir="${target.dir}/dist/exploded/nbia-download-manager" includes="*"/>
					</path>
					<sequential>
						<var name="just.jar.filename" unset="true"/>
						<basename property="just.jar.filename" file="@{jar}"/>
						<echo message="---------------------------------------------------------------------------------------------------------------------------"/>
						<echo message="${just.jar.filename}"/>
						<echo message="modifying manifest first because of Java 7 changes"/>
						<jar file="${target.dir}/dist/exploded/nbia-download-manager/${just.jar.filename}" update="true">
							<manifest>
								<attribute name="Application-Name" value="NBIA Download Manager"/>
								<attribute name="Codebase" value="${jar.manifest.secure.attribute.Codebase}"/>
								<attribute name="Permissions" value="${jar.manifest.secure.attribute.Permissions}"/>
								<attribute name="Application-Library-Allowable-Codebase" value="${jar.manifest.secure.attribute.Application-Library-Allowable-Codebase}"/>
								<attribute name="Caller-Allowable-Codebase" value="${jar.manifest.secure.attribute.Caller-Allowable-Codebase}"/>
								<attribute name="Trusted-Only" value="${jar.manifest.secure.attribute.Trusted-Only}"/>
								<attribute name="Trusted-Library" value="${jar.manifest.secure.attribute.Trusted-Library}"/>
							</manifest>
						</jar>
						<signjar destDir="${target.dir}/dist/exploded/nbia-download-manager" alias="${jar-signing.keystore.alias}" keystore="${jar-signing.keystore.location}" storepass="${jar-signing.keystore.password}" keypass="${jar-signing.keystore.password}" lazy="true">
							<path>
								<fileset dir="${target.dir}/dist/exploded/nbia-download-manager" includes="${just.jar.filename}"/>
							</path>
						</signjar>
					</sequential>
				</for>
				<!--sign-jars jars.dir="${target.dir}/dist/exploded/nbia-download-manager"/-->
			</then>
			<else>
				<echo message="jar-signing.execution.time not set to build, not signing jars"/>
			</else>
		</if>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-web.build.target}" dir="${nbia-web.base.dir}">
			<property name="project.name" value="${project.name}"/>
			<property name="nbia.version" value="${nbia.version}"/>
			<property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}"/>
			<property name="gov.nih.nci.ncia.wiki.context.sensitive.help.url" value="${gov.nih.nci.ncia.wiki.context.sensitive.help.url}"/>
			<property name="nbia.wiki.user.guide.url" value="${nbia.wiki.user.guide.url}"
			/>
			<property name="property.file" value="${properties.file}"/>
		</ant>
	</target>
	
	<target name="-branding">
		<!-- Clean up working area -->
		<delete dir="${target.dir}/temp/nbia-wars"/>
		<delete dir="${target.dir}/temp/ncia-war"/>
		<!-- Make working directories -->
		<mkdir dir="${target.dir}/temp/nbia-wars"/>
		<mkdir dir="${target.dir}/temp/ncia-war"/>
		<!-- Extract required archives -->
		<unzip src="${nbia-web.dist.dir}/nbia.ear" dest="${target.dir}/temp/nbia-wars"/>
		<unzip src="${target.dir}/temp/nbia-wars/ncia.war" dest="${target.dir}/temp/ncia-war"/>
		<property name="webapp.dir.path" value="${target.dir}/temp/ncia-war"/>
		<sequential>
			<!--   add cancer center logo header if necessary -->
			<if>
				<or>
					<not>
						<isset property="cancer.center.logo"/>
					</not>
					<equals arg1="${common.resources.dir}/branding/${cancer.center.logo}" arg2=""/>
				</or>
				<then>
					<echo>No Cancer Center logo specified.  Substituting CCLOGO with empty string.</echo>
				</then>
				<else>
					<basename property="cc.logo.filename" file="${common.resources.dir}/branding/${cancer.center.logo}"/>
					<copy file="${common.resources.dir}/branding/${cancer.center.logo}" tofile="${webapp.dir.path}/images/${cc.logo.filename}"/>
					<!-- in case no background image provided -->
					<if>
						<or>
							<not>
								<isset property="cancer.center.background"/>
							</not>
							<equals arg1="${common.resources.dir}/branding/${cancer.center.background}" arg2=""/>
						</or>
						<then>
							<property name="cancer.center.background" value="whitebg.jpg"/>
							<basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
						</then>
						<else>
							<basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
							<copy file="${common.resources.dir}/branding/${cancer.center.background}" tofile="${webapp.dir.path}/images/${cc.bgimage.filename}"/>
						</else>
					</if>
					<basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
					<loadfile property="cc.logo.header" srcFile="${webapp.dir.path}/WEB-INF/facelets/layout/ccHeader.xhtml">
						<filterchain>
							<expandproperties/>
						</filterchain>
					</loadfile>
					<echo file="${webapp.dir.path}/WEB-INF/facelets/layout/nciHeader.xhtml" append="false">${cc.logo.header}</echo>
				</else>
			</if>
			<!-- end of external cancer center logo header  -->
			<if>
				<and>
					<not>
						<equals arg1="${common.resources.dir}/branding/${branding.left.submenu.quicklinks.path}" arg2=""/>
					</not>
					<isset property="branding.left.submenu.quicklinks.path"/>
				</and>
				<then>
					<copy file="${common.resources.dir}/branding/${branding.left.submenu.quicklinks.path}" tofile="${webapp.dir.path}/WEB-INF/facelets/layout/quickLinks.xhtml" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${common.resources.dir}/branding/${branding.welcome.image.path}" arg2=""/>
					</not>
					<isset property="branding.welcome.image.path"/>
				</and>
				<then>
					<copy file="${common.resources.dir}/branding/${branding.welcome.image.path}" tofile="${webapp.dir.path}/images/bannerHome.gif" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${common.resources.dir}/branding/${branding.welcome.text.path}" arg2=""/>
					</not>
					<isset property="branding.welcome.text.path"/>
				</and>
				<then>
					<copy file="${common.resources.dir}/branding/${branding.welcome.text.path}" tofile="${webapp.dir.path}/WEB-INF/facelets/welcomeText.xhtml" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${common.resources.dir}/branding/${branding.welcome.title.path}" arg2=""/>
					</not>
					<isset property="branding.welcome.title.path"/>
				</and>
				<then>
					<copy file="${common.resources.dir}/branding/${branding.welcome.title.path}" tofile="${webapp.dir.path}/WEB-INF/facelets/welcomeTitle.xhtml" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${common.resources.dir}/branding/${branding.legal.rules.path}" arg2=""/>
					</not>
					<isset property="branding.legal.rules.path"/>
				</and>
				<then>
					<copy file="${common.resources.dir}/branding/${branding.legal.rules.path}" tofile="${webapp.dir.path}/WEB-INF/facelets/legalRules.xhtml" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${branding.applogo.visible}" arg2=""/>
					</not>
					<isset property="branding.applogo.visible"/>
				</and>
				<then>
					<if>
						<equals arg1="${branding.applogo.visible}" arg2="no"/>
						<then>
							<copy file="${webapp.dir.path}/WEB-INF/facelets/layout/empty.xhtml" tofile="${webapp.dir.path}/WEB-INF/facelets/layout/appHeader.xhtml" overwrite="true"/>
						</then>
						<else>
							<copy file="${branding.applogo.path}" tofile="${webapp.dir.path}/images/Logo-NCIA.jpg" overwrite="true"/>
						</else>
					</if>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${branding.footer.path}" arg2=""/>
					</not>
					<isset property="branding.footer.path"/>
				</and>
				<then>
					<copy file="${branding.footer.path}" tofile="${webapp.dir.path}/WEB-INF/facelets/layout/appFooter.xhtml" overwrite="true"/>
				</then>
			</if>
			<if>
				<and>
					<not>
						<equals arg1="${branding.pdf.path}" arg2=""/>
					</not>
					<isset property="branding.pdf.path"/>
				</and>
				<then>
					<echo file="${webapp.dir.path}/WEB-INF/classes/ncia_messages.properties" append="true">${line.separator}gov.nih.nci.ncia.pdf.location=${branding.pdf.path}
                             ${line.separator}branding.release.note.pdf=${branding.release.note.pdf}${line.separator}branding.manual.pdf=${branding.manual.pdf}
                             ${line.separator}branding.exam.log.pdf=${branding.exam.log.pdf}${line.separator}branding.interview.log.pdf=${branding.interview.log.pdf}
                             ${line.separator}branding.xray.manual.pdf=${branding.xray.manual.pdf}
                           </echo>
				</then>
			</if>
		</sequential>
		<war destfile="${target.dir}/temp/nbia-wars/ncia.war" compress="false" update="true" webxml="${target.dir}/temp/ncia-war/WEB-INF/web.xml">
			<fileset dir="${target.dir}/temp/ncia-war">
				<include name="*/**"/>
			</fileset>
		</war>
	</target>
	
	<target name="build:db:new" depends="build:nbia-liquibase" description="Create new database ">
		<echoproperties prefix="database"/>
		<path id="liquibase_stuff">
			<pathelement location="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar"/>
			<pathelement location="${target.dir}/lib/nbia-liquibase/compile/liquibase-core-1.9.3.jar"/>
			<pathelement location="${database.driver.file}"/>
		</path>
		<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${dist.exploded.dir}/nbia-liquibase/ant-classloadertask-1.0-RC2.jar"/>
		<classloader loader="project" classpathref="liquibase_stuff"/>
		<taskdef resource="liquibasetasks.properties">
			<classpath refid="liquibase_stuff"/>
		</taskdef>
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}/${database.type}">
				<include name="**/*.sql"/>
			</fileset>
		</copy>
		<echo message="Dropping database objects"/>
		<dropAllDatabaseObjects driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" promptOnNonLocalDatabase="${prompt.user.if.not.local.database}" classpathref="liquibase_stuff" defaultSchemaName="${database.schema}"/>
		<switch value="${database.type}">
			<case value="oracle">
				<for list="${db.install.create.oracle.file.list}" param="db.install.file">
					<sequential>
						<sql driver="${database.driver}" url="${database.url}" userid="${database.user}" password="${database.password}" src="${db-install.dist.dir}/@{db.install.file}" onerror="abort" autocommit="true" delimiter=";" delimitertype="row" keepformat="true">
							<classpath>
								<pathelement location="${database.driver.file}"/>
							</classpath>
						</sql>
					</sequential>
				</for>
			</case>
			<case value="mysql">
				<for list="${db.install.create.mysql.file.list}" param="db.install.file">
					<sequential>
						<sql driver="${database.driver}" url="${database.url}" userid="${database.user}" password="${database.password}" src="${db-install.dist.dir}/@{db.install.file}" onerror="abort" autocommit="true" delimiter=";" delimitertype="normal" keepformat="true">
							<classpath>
								<pathelement location="${database.driver.file}"/>
							</classpath>
						</sql>
					</sequential>
				</for>
			</case>
		</switch>
		<antcall target="build:db:update"/>
		<if>
			<isset property="database.release.version"/>
			<then>
				<tagDatabase driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" classpathref="liquibase_stuff" defaultSchemaName="${database.schema}" tag="${database.release.version}">
				</tagDatabase>
			</then>
			<else>
				<fail message="Variable database.release.version must be set for possible future rolllback."/>
			</else>
		</if>
		<!-- should be part of the new database creation script TBD -->
		<!--antcall target="create-guest-account"/-->
	</target>
	
	<target name="build:db:update" description="Update database">
		<echoproperties prefix="database"/>
		<if>
			<available file="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar"/>
			<then>
				<echo message="Liquibase lib is created already"/>
			</then>
			<else>
				<antcall target="build:nbia-liquibase"/>
			</else>
		</if>
		<path id="liquibase_stuff">
			<pathelement location="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar"/>
			<pathelement location="${target.dir}/lib/nbia-liquibase/compile/liquibase-core-1.9.3.jar"/>
			<pathelement location="${database.driver.file}"/>
		</path>
		<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${dist.exploded.dir}/nbia-liquibase/ant-classloadertask-1.0-RC2.jar"/>
		<classloader loader="project" classpathref="liquibase_stuff"/>
		<taskdef resource="liquibasetasks.properties">
			<classpath refid="liquibase_stuff"/>
		</taskdef>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}/${database.type}">
				<include name="**/**/db-upgrade.xml"/>
			</fileset>
		</copy>
		<property name="database.changelog.file" value="${db-upgrade.dist.dir}/db-upgrade.xml"/>
		<!--basename property="changelog.file" file="${database.changelog.file}"/>
<echo message="changelog.file=${changelog.file} database.changelog.file=${database.changelog.file}"/-->
		<updateDatabase driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" classpathref="liquibase_stuff" promptOnNonLocalDatabase="${prompt.user.if.not.local.database}" defaultSchemaName="${database.schema}" dropFirst="false" changeLogFile="${database.changelog.file}"/>
	</target>
	
	<target name="install:ctp" description="install ctp to application base path" depends="dist:ctp-client, dist:ctp-server">
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix"/>
				<os family="mac"/>
			</or>
		</condition>
		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows"/>
		</condition>
		<echo message="Installed CTP Client in ${application.base.path}"/>
		<delete dir="${application.base.path}/CTP-Client"/>
		<unzip dest="${application.base.path}/CTP-Client" src="${nbia-ctp.dist.dir}/CTP_Client.zip"/>
		<echo message="Installed CTP Server in ${application.base.path}"/>
		<delete dir="${application.base.path}/CTP-Server"/>
		<unzip dest="${application.base.path}/CTP-Server" src="${nbia-ctp.dist.dir}/CTP_Server.zip"/>
	</target>
	
	<target name="nbia:runUtility" description="run the utility to correct db" depends="build:nbia-ctp">
		<java jar="${nbia-ctp.dist.dir}/nbiaDatabaseUpdator.jar" fork="true"/>
	</target>
	
	<target name="dist:solr">
		<copy todir="${solr.dist.dir}">
			<fileset dir="${common.dir}/resources/solr/">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="build:nbia-api" depends="init,
	                   build:nbia-domain,
		           build:nbia-dao">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-api.build.target}" dir="${nbia-api.base.dir}">
			<property name="nbia.api.oauth2.client.id" value="${nbia.api.oauth2.client.id}"/>
			<property name="nbia.api.oauth2.client.secret" value="${nbia.api.oauth2.client.secret}"/>
			<property name="nbia.api.oauth2.token.validity.in.seconds" value="${nbia.api.oauth2.token.validity.in.seconds}"/>
		</ant>
	</target>
	<target name="build:all:deploy" depends="build:all">
		  <copy todir="${gov.nih.nci.ncia.tomcat.home}/webapps">
		    <fileset dir="${dist.exploded.dir}/nbia-wars"/>
		  </copy>
		  <delete dir="${gov.nih.nci.ncia.tomcat.home}/webapps/ncia"/>
		  <delete dir="${gov.nih.nci.ncia.tomcat.home}/webapps/ncia-api"/>
		  <delete dir="${gov.nih.nci.ncia.tomcat.home}/webapps/oviyam2"/>
		  <delete dir="${gov.nih.nci.ncia.tomcat.home}/webapps/nbia-download"/>
	</target>


	
	<target name="build:config:all">
		<copy overwrite="true" file="${common.resources.dir}/tomcat/nbia.properties" tofile="${common.resources.dir}/tomcat/ahp_nbia.properties">
			<filterset>
				<filter token="gov.nih.nci.ncia.imaging.server.url" value="${gov.nih.nci.ncia.imaging.server.url}"/>
				<filter token="gov.nih.nci.ncia.mapped.image.path.head" value="${gov.nih.nci.ncia.mapped.image.path.head}"/>
				<filter token="gov.nih.nci.ncia.image.path.pattern" value="${gov.nih.nci.ncia.image.path.pattern}"/>
				<filter token="gov.nih.nci.ncia.jboss.mq.url" value="${gov.nih.nci.ncia.jboss.mq.url}"/>
				<filter token="gov.nih.nci.ncia.zip.location" value="${gov.nih.nci.ncia.zip.location}"/>
				<filter token="gov.nih.nci.ncia.ftp.location" value="${gov.nih.nci.ncia.ftp.location}"/>
				<filter token="gov.nih.nci.ncia.grid.local.node.name" value="${gov.nih.nci.ncia.grid.local.node.name}"/>
				<filter token="gov.nih.nci.ncia.ui.uid.display.length" value="${gov.nih.nci.ncia.ui.uid.display.length}"/>
				<filter token="gov.nih.nci.ncia.ftp.url" value="${gov.nih.nci.ncia.ftp.url}"/>
				<filter token="gov.nih.nci.ncia.admin.email" value="${gov.nih.nci.ncia.admin.email}"/>
				<filter token="mail.smtp.server" value="${mail.smtp.server}"/>
				<filter token="gov.nih.nci.ncia.installationSite" value="${gov.nih.nci.ncia.installationSite}"/>
				<filter token="enabled_guest_account" value="${enabled_guest_account}"/>
				<filter token="guest_username" value="${guest_username}"/>
				<filter token="gov.nih.nci.ncia.download.server.url" value="${gov.nih.nci.ncia.download.server.url}"/>
				<filter token="enable_classic_download" value="${enable_classic_download}"/>
				<filter token="registration.email.subject" value="${registration.email.subject}"/>
				<filter token="gov.nih.nci.ncia.solr.home" value="${gov.nih.nci.ncia.solr.home}"/>
				<filter token="gov.nih.nci.ncia.solr.updateinterval" value="${gov.nih.nci.ncia.solr.updateinterval}"/>
				<filter token="gov.nih.nci.ncia.workflow.updateinterval" value="${gov.nih.nci.ncia.workflow.updateinterval}"/>
				<filter token="discover.remote.nodes" value="${discover.remote.nodes}"/>
				<filter token="protection_element_prefix" value="${protection_element_prefix}"/>
				<filter token="csm_application_name" value="${csm_application_name}"/>
				<filter token="database.type" value="${database.type}"/>
				<filter token="show.collection.search.criteria" value="${show.collection.search.criteria}"/>
				<filter token="show.anatomical.search.criteria" value="${show.anatomical.search.criteria}"/>
				<filter token="gov.nih.nci.ncia.download.no.retry" value="${gov.nih.nci.ncia.download.no.retry}"/>
				<filter token="gov.nih.nci.ncia.encrypt.key" value="${gov.nih.nci.ncia.encrypt.key}"/>
				<filter token="gov.nih.nci.ncia.wiki.context.sensitive.help.url" value="${gov.nih.nci.ncia.wiki.context.sensitive.help.url}"/>
			 	<filter token="qctool.visibility.stage1" value="${qctool.visibility.stage1}"/>
			 	<filter token="qctool.visibility.stage2" value="${qctool.visibility.stage2}"/>
			 	<filter token="qctool.visibility.stage3" value="${qctool.visibility.stage3}"/>
			 	<filter token="qctool.visibility.stage4" value="${qctool.visibility.stage4}"/>
			 	<filter token="qctool.visibility.stage5" value="${qctool.visibility.stage5}"/>
			 	<filter token="qctool.visibility.stage6" value="${qctool.visibility.stage6}"/>
			 	<filter token="qctool.visibility.stage7" value="${qctool.visibility.stage7}"/>
			 	<filter token="qctool.batchNumberSelect.size" value="${qctool.batchNumberSelect.size}"/>
			</filterset>
		</copy>
		<antcall target="build:all"/>
		<antcall target="ahp:tomcat:config"/>
		<delete file="${common.resources.dir}/tomcat/ahp_nbia.properties"/>
	</target>
	<target name="ahp:tomcat:config" depends="init">
		<if>
			<equals arg1="${authentication.type}" arg2="ldap"/>
			<then>
				<echo>copying ${common.resources.dir}/tomcat/jaas.config.ldap to ${dist.exploded.dir}/tomcat-files/jaas.config</echo>
				<copy file="${common.resources.dir}/tomcat/jaas.config.ldap-auth" tofile="${dist.exploded.dir}/tomcat-files/jaas.config" overwrite="true">
					<filterset>
						<filter token="application.context.name" value="${application.context.name}"/>
						<filter token="ldap.url" value="${ldap.url}"/>
						<filter token="ldap.basedn" value="${ldap.basedn}"/>
						<filter token="ldap.user" value="${ldap.user}"/>
						<filter token="ldap.pass" value="${ldap.pass}"/>
					</filterset>
				</copy>
			</then>
			<else>
				<copy file="${common.resources.dir}/tomcat/jaas.config" tofile="${dist.exploded.dir}/tomcat-files/jaas.config" overwrite="true">
					<filterset>
						<filter token="database.type" value="${database.type}"/>
						<filter token="database.driver" value="${database.driver}"/>
						<filter token="database.url" value="${database.url}"/>
						<filter token="database.user" value="${database.user}"/>
						<filter token="database.password" value="${database.password}"/>
					</filterset>
				</copy>
			</else>
		</if>
		<copy file="${common.resources.dir}/tomcat/setenv.bat" tofile="${dist.exploded.dir}/tomcat-files/setenv.bat" overwrite="true">
			<filterset>
				<filter token="tomcat.home" value="${gov.nih.nci.ncia.tomcat.home}"/>
			</filterset>
		</copy>
		<copy file="${common.resources.dir}/tomcat/setenv.sh" tofile="${dist.exploded.dir}/tomcat-files/setenv.sh" overwrite="true">
			<filterset>
				<filter token="tomcat.home" value="${gov.nih.nci.ncia.tomcat.home}"/>
			</filterset>
		</copy>
		<echo>copying ${common.resources.dir}/tomcat/context.xml to ${dist.exploded.dir}/tomcat-files/context.xml</echo>
		<copy file="${common.resources.dir}/tomcat/context.xml" tofile="${dist.exploded.dir}/tomcat-files/context.xml" overwrite="true">
		</copy>
		<copy file="${common.resources.dir}/tomcat/log4j.properties" tofile="${dist.exploded.dir}/tomcat-files/log4j.properties" overwrite="true">
		</copy>
		<copy file="${common.resources.dir}/tomcat/server.xml" tofile="${dist.exploded.dir}/tomcat-files/server.xml" overwrite="true">
			<filterset>
				<filter token="database.type" value="${database.type}"/>
				<filter token="database.driver" value="${database.driver}"/>
				<filter token="database.url" value="${database.url}"/>
				<filter token="database.user" value="${database.user}"/>
				<filter token="database.password" value="${database.password}"/>
				<filter token="tomcat.server.port" value="${tomcat.server.port}"/>
			</filterset>
		</copy>
		<get src="${mysql.driver.jar.src.url}" dest="${dist.exploded.dir}/tomcat-files/${mysql.driver.jar}"/>
	</target>
	<target name="build:tomcat:config" depends="init">
		<if>
			<equals arg1="${authentication.type}" arg2="ldap-auth"/>
			<then>
				<copy file="${common.resources.dir}/tomcat/jaas.config.ldap-auth" tofile="${gov.nih.nci.ncia.tomcat.home}/conf/jaas.config" overwrite="true">
					<filterset>
						<filter token="application.context.name" value="${application.context.name}"/>
						<filter token="ldap.url" value="${ldap.url}"/>
						<filter token="ldap.basedn" value="${ldap.basedn}"/>
						<filter token="ldap.user" value="${ldap.user}"/>
						<filter token="ldap.pass" value="${ldap.pass}"/>
					</filterset>
				</copy>
			</then>
			 <elseif>
			 	<equals arg1="${authentication.type}" arg2="ldap"/>
			  <then>
				<copy file="${common.resources.dir}/tomcat/jaas.config.ldap" tofile="${gov.nih.nci.ncia.tomcat.home}/conf/jaas.config" overwrite="true">
					<filterset>
						<filter token="application.context.name" value="${application.context.name}"/>
						<filter token="ldap.url" value="${ldap.url}"/>
						<filter token="ldap.basedn" value="${ldap.basedn}"/>
					</filterset>
				</copy>
			  </then>
			 </elseif>
			<else>
				<copy file="${common.resources.dir}/tomcat/jaas.config" tofile="${gov.nih.nci.ncia.tomcat.home}/conf/jaas.config" overwrite="true">
					<filterset>
						<filter token="database.type" value="${database.type}"/>
						<filter token="database.driver" value="${database.driver}"/>
						<filter token="database.url" value="${database.url}"/>
						<filter token="database.user" value="${database.user}"/>
						<filter token="database.password" value="${database.password}"/>
					</filterset>
				</copy>
			</else>
		</if>
		<copy file="${common.resources.dir}/tomcat/setenv.bat" tofile="${gov.nih.nci.ncia.tomcat.home}/bin/setenv.bat" overwrite="true">
			<filterset>
				<filter token="tomcat.home" value="${gov.nih.nci.ncia.tomcat.home}"/>
			</filterset>
		</copy>
		<copy file="${common.resources.dir}/tomcat/context.xml" tofile="${gov.nih.nci.ncia.tomcat.home}/conf/context.xml" overwrite="true">
		</copy>
		<copy file="${common.resources.dir}/tomcat/log4j.properties" tofile="${gov.nih.nci.ncia.tomcat.home}/lib/log4j.properties" overwrite="true">
		</copy>
		<copy file="${common.resources.dir}/tomcat/server.xml" tofile="${gov.nih.nci.ncia.tomcat.home}/conf/server.xml" overwrite="true">
			<filterset>
				<filter token="database.type" value="${database.type}"/>
				<filter token="database.driver" value="${database.driver}"/>
				<filter token="database.url" value="${database.url}"/>
				<filter token="database.user" value="${database.user}"/>
				<filter token="database.password" value="${database.password}"/>
				<filter token="tomcat.server.port" value="${tomcat.server.port}"/>
			</filterset>
		</copy>
		<get src="${mysql.driver.jar.src.url}" dest="${gov.nih.nci.ncia.tomcat.home}/lib/${mysql.driver.jar}"/>
		<get src="${oracle.driver.jar.src.url}" dest="${gov.nih.nci.ncia.tomcat.home}/lib/${oracle.driver.jar}"/> 
		<copy file="${properties.file}" tofile="${dist.dir}/nbia.properties"/>
	</target>
	
	<target name="dist" description="Makes all distributions and installer" depends="
        build:all,
		build:nbia-uat,
        dist:installer,
        dist:solr"/>
	<!-- Copies install time resources into distribution tree -->
	<target name="dist:installer:prep">
		<!-- Copy db-install and db-upgrade scripts from source into distribution area. The db files need to be under db-[install/upgard]/${database.type}. -->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/FileSender">
			<fileset dir="${software.dir}/nbia-ctp/FileSender"/>
		</copy>
		<sequential>
			<!-- Do some cleanup -->
			<delete>
				<fileset dir="${dist.exploded.dir}">
					<include name="build.xml"/>
					<include name="*properties*"/>
				</fileset>
			</delete>
			<!-- Copy install related xml and properties files -->
			<echo message="Copying build and property files"/>
			<copy todir="${dist.exploded.dir}" overwrite="true">
				<fileset dir="${build.dir}">
					<include name="install.xml"/>
					<include name="install.properties"/>
					<include name="properties.template"/>
					<include name="project.properties"/>
				</fileset>
			</copy>
			<!-- Set default target and properyties.file to install and install.properties -->
			<basename file="${dist.exploded.dir}/install.properties" property="properties.file.name"/>
			<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.project.*default=.)\w+(.\s+.*)" replace="\1install\2"/>
			<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.*)install.properties(.*)" replace="\1${properties.file.name}\2"/>
			<!-- Rename install.xml to build.xml so manual installs will not need to include the -f optoin on ant, simplifying the install proces. -->
			<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml"/>
			<!-- This  copies common files over, common files are currently resource files like configuration files and database scripts -->
			<echo message="Copying common dir"/>
			<copy todir="${dist.exploded.dir}/common" overwrite="true">
				<fileset dir="${common.dir}">
					<include name="resources/**/*"/>
				</fileset>
			</copy>
			<echo message="Copying tools dir"/>
			<!-- Copy over binary distributions downloaded earlier -->
			<copy todir="${dist.exploded.dir}/tools" overwrite="true">
				<fileset dir="${download.dir}">
					<include name="**/*"/>
				</fileset>
			</copy>
		</sequential>
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir=".">
				<include name="ctp.xml"/>
				<include name="ctp-macrodefs.xml"/>
				<include name="install-macros.xml"/>
				<include name="macrodefs.xml"/>
			</fileset>
		</copy>
	</target>
	
	<!-- Creates the installer distribution used by installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/nbia-install_${nbia.version}"/>
		<!-- Set environment name to external -->
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;env.name&quot; value=&quot;)\w+(&quot;/&gt;)" replace="\1external\2"/>
		<for list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname,jar-signing.generate-selfsigned,jar-signing.keystore.alias,jar-signing.keystore.password,jar-signing.keystore.location,gov.nih.nci.ncia.encrypt.key" param="property.name" delimiter=",">
			<sequential>
				<replaceregexp file="${dist.exploded.dir}/install.properties" match="^(@{property.name})=.*" replace="\1=REPLACE_VALUE" flags="g" byline="true"/>
			</sequential>
		</for>
		<for list="ldap.url,ldap.basedn" param="property.name" delimiter=",">
			<sequential>
				<replaceregexp file="${dist.exploded.dir}/install.properties" match="^(@{property.name})=.*" replace="\1=replace_value" flags="g" byline="true"/>
			</sequential>
		</for>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(grid.index.url)=.*" replace="\1=http://cagrid-index.nci.nih.gov:8080/wsrf/services/DefaultIndexService"/>
		<copy todir="${dist.exploded.dir}/nbia-uat" overwrite="true">
			<fileset dir="${nbia-uat.dist.dir}"/>
		</copy>
		<zip destfile="${dist.dir}/nbia-install_${nbia.version}.zip" basedir="${dist.exploded.dir}" excludes="nbia-services-commons/**,/nbia-domain/*,nbia-download/*,nbia-download-manager/*"/>
		<copy todir="${dist.dir}" overwrite="true">
			<fileset dir="${nbia-ctp.dist.dir}">
				<include name="CTP_Client.zip"/>
			</fileset>
		</copy>

	</target>
	
	<target name="build:nbia-uat" description="This target is created for AHP3 build workflow">
		<delete dir="${nbia-uat.dist.dir}" quiet="true"/>

		<if>
			<os family="unix"/>
		<then>
			<sequential>
				<echo message="Linux build environment"/>
				<exec executable="npm" dir="${nbia-uat.base.dir}">
					<arg value="install" />
				</exec>
				<exec executable="gulp" dir="${nbia-uat.base.dir}">
					<arg value="compile" />
				</exec>
			</sequential>
		</then>
		<else>
			<if>
				<os family="windows"/>
			<then>
				<echo message="Windows build environment"/>
				<sequential>
					<exec dir="${nbia-uat.base.dir}" executable="cmd" >
						<arg line="/c npm 'install'"/>
					</exec>			
					<exec dir="${nbia-uat.base.dir}" executable="cmd" >
						<arg line="/c gulp 'compile'"/>
					</exec>
				</sequential>
			</then>	
			</if>
		</else>
		</if>			
	</target>	
</project>
