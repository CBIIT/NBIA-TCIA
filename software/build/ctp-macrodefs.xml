<!--L
   Copyright SAIC, Ellumen and RSNA (CTP)


   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/national-biomedical-image-archive/LICENSE.txt for details.
L-->

<project name="ctp-macrodefs">


  <macrodef name="ctp-backup">
    <attribute name="ctp.home" default="${ctp.server.home}"/>
    <attribute name="exclude.backup" default="${exclude.ctp.server.backup}"/>      
    <attribute name="backup.ctp.base.dir" default="${backup.ctp.server.base.dir}"/>
    <attribute name="server.or.client" default="server"/>
    
    <sequential> 

      <sleep seconds="5" />

      <var name="ctp.@{server.or.client}.exists" unset="true"/>
      <available file="@{ctp.home}/CTP/Runner.jar" property="ctp.@{server.or.client}.exists"/>
      <if>
        <isset property="ctp.@{server.or.client}.exists"/>
        <then>    
          <!-- preserve the users.xml -->
          <copy file="@{ctp.home}/CTP/users.xml"
                todir="@{backup.ctp.base.dir}"
                overwrite="true"/>
        </then>
      </if>

      <var name="backup.count" unset="true"/>
      <property name="backup.count" value="5"/>

      <if>
        <not>
          <equals arg1="@{exclude.backup}" arg2="true"/>
        </not>
        <then>

          <backup-dir
            src.dir="@{ctp.home}"
            backup.base.dir="@{backup.ctp.base.dir}"
            backup.count="${backup.count}"
            />
        </then>
      </if>  

      <delete dir="@{ctp.home}" />   
    </sequential>  
  </macrodef> 
  
  <macrodef name="ctp-create-change-logs">
    <attribute name="ctp.home" default="${ctp.server.home}"/>
    <attribute name="exclude.backup" default="${exclude.ctp.server.backup}"/>
    <attribute name="backup.ctp.base.dir"  default="${backup.ctp.server.base.dir}"/>
    
    <attribute name="ctp.home.dirname"  default="${ctp.server.home.dirname}"/>
    <attribute name="install.time"  default="${install.time}"/>
    <attribute name="install.logs.dir" default="${install-logs.dir}"/>
    
    <sequential>   
     <echo>Foo2: @{backup.ctp.base.dir}</echo>
      <echo>Foo2: @{install.logs.dir}</echo>
      <if>
        <not>
          <equals arg1="@{exclude.backup}" arg2="true"/>
        </not>
        <then>
       
          <var name="ctp.changelogFile" unset="true"/>
          <var name="ctp.compare1.dir" unset="true"/>
          <var name="ctp.compare2.dir" unset="true"/>
          
          <property name="ctp.changelogFile" location="@{install.logs.dir}/changeLog-@{install.time}.txt"/>
          <property name="ctp.compare1.dir" location="@{backup.ctp.base.dir}/backup/@{ctp.home.dirname}"/>
          <property name="ctp.compare2.dir" location="@{ctp.home}"/>
          
          
          <report-dir-diff dir1="${ctp.compare1.dir}"
                           dir2="${ctp.compare2.dir}"
                           reportFile="${ctp.changelogFile}"/>

          <!-- Copy app server logs -->        
          <mkdir dir="@{ctp.home}/logs"/>
          <mkdir dir="@{backup.ctp.base.dir}/backup/@{ctp.home.dirname}/logs"/>

          <!-- so the logs wont be included in the zip --> 
          <move todir="@{ctp.home}/logs">
            <fileset dir="@{backup.ctp.base.dir}/backup/@{ctp.home.dirname}/logs">
              <include name="*"/>
            </fileset>
          </move>

          <!-- Compress backup and cleanup -->
          <mkdir dir="@{backup.ctp.base.dir}/backup1"/>
          <zip destfile="@{backup.ctp.base.dir}/backup1/CTP.zip" 
               basedir="@{backup.ctp.base.dir}/backup" />
          <delete dir="@{backup.ctp.base.dir}/backup"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="ctp-force-qadmin">
    <attribute name="ctp.dir"/>
    <sequential>
      <!-- add qadmin role to existing users.xml --> 
      <xmltask source="@{ctp.dir}/users.xml"
               dest="@{ctp.dir}/users.xml">
        <!-- no xmlcatalog necessary -->
        <remove path="//user[@username='admin']/role/text()[contains(.,'qadmin')]/.."/>                 
        <insert path="//user[@username='admin']"> 
          <![CDATA[ 
            <role>qadmin</role>
          ]]> 
        </insert>               

      </xmltask>    
    </sequential>
  </macrodef>
  
  <macrodef name="create-ctp-client-startup-scripts">
    <attribute name="ctp.client.home" default="${ctp.client.home}"/>
    <sequential>
    
    <echo file="@{ctp.client.home}/CTP/ctp.bat">  
      <![CDATA[
      echo Starting CTP Client...
      java -Xmx512m -jar Runner.jar
      ]]>          
      </echo>      
      <echo file="@{ctp.client.home}/CTP/ctp.sh">
      <![CDATA[
      #!/bin/sh
      nohup java -Xmx512m -jar Runner.jar &
      ]]>
      </echo>     
    </sequential>
    
  </macrodef>
  
  <macrodef name="ctp-client-configure">
    <attribute name="ctp.client.home" default="${ctp.client.home}"/>
    <attribute name="ctp.client.port" default="${ctp.client.port}"/>
    <attribute name="ctp.client.http.import.service.port" default="${ctp.client.http_import_service.port}"/>
    <attribute name="ctp.client.dicom.import.service.port" default="${ctp.client.dicom_import_service.port}"/>
    <attribute name="ctp.server.http.import.service.port" default="${ctp.server.http_import_service.port}"/>
    <attribute name="ctp.server.verifier.port" default="${ctp.server.verifier.port}"/>
    <attribute name="ctp.client.exportService.username" default="${ctp.client.exportService.username}"/>
    <attribute name="ctp.client.exportService.password" default="${ctp.client.exportService.password}"/>
    <sequential>
    
   
      <xmltask source="@{ctp.client.home}/CTP/config.xml"
               dest="@{ctp.client.home}/CTP/config.xml">
        <!-- no xmlcatalog necessary -->
        <replace path="//Server/@port" 
                 withtext="@{ctp.client.port}" />
        <replace path="//ImportService[@class='org.rsna.ctp.stdstages.HttpImportService']/@port" 
                 withtext="@{ctp.client.http.import.service.port}" />
        <replace path="//ImportService[@class='org.rsna.ctp.stdstages.DicomImportService']/@port" 
                 withtext="@{ctp.client.dicom.import.service.port}" />                                                         
        <replace path="//ExportService/@url" 
                 withtext="http://localhost:@{ctp.server.http.import.service.port}" />
        <replace path="//DatabaseVerifier/@url" 
                 withtext="http://localhost:@{ctp.server.verifier.port}" />
        <replace path="//DatabaseVerifier/@password" 
                 withtext="@{ctp.client.exportService.password}" />
        <replace path="//DatabaseVerifier/@username" 
                 withtext="@{ctp.client.exportService.username}" />         
        <replace path="//ExportService/@username" 
                 withtext="@{ctp.client.exportService.username}" /> 
        <replace path="//ExportService/@password" 
                 withtext="@{ctp.client.exportService.password}" />            
      </xmltask>    
      <echo>@{ctp.client.home}/CTP/config.xml.out</echo>
  
      <prettify-xml in.xml.file="@{ctp.client.home}/CTP/config.xml" 
                    out.xml.file="@{ctp.client.home}/CTP/config.xml.out"/>
      <move file="@{ctp.client.home}/CTP/config.xml"    
            tofile="@{ctp.client.home}/CTP/config.xml.unpretty"/>
      <move file="@{ctp.client.home}/CTP/config.xml.out"    
            tofile="@{ctp.client.home}/CTP/config.xml"/>      
    </sequential>
  </macrodef>

  <!-- this configuration is common to both server and client  -->  
  <macrodef name="ctp-configure">
    <attribute name="ctp.home" default="${ctp.server.home}"/>
    <attribute name="king.password" default="${ctp.server.king.password}"/>
    <attribute name="admin.password" default="${ctp.server.admin.password}"/>
    <attribute name="common.dir.src" default="${common.dir.src}"/>
    <attribute name="ctp.resources.relative.dir" default="server"/>
    
    <sequential>
      <!-- this copies anonymizer script and all that into example files that will be used upon startup -->
      <!-- don't set overwrite to true because of users.xml -->
      <copy todir="@{ctp.home}/CTP">
        <fileset dir="@{common.dir.src}/resources/ctp/@{ctp.resources.relative.dir}">
          <include name="**/*"/>
          <exclude name="example*"/>
          <exclude name="users.xml"/>
        </fileset>
        <fileset dir="@{common.dir.src}/resources/ctp">
          <include name="*.*"/>
          <exclude name="example*"/>
        </fileset>      
      </copy> 
      <copy todir="@{ctp.home}/CTP/examples">
        <fileset dir="@{common.dir.src}/resources/ctp/@{ctp.resources.relative.dir}">
          <include name="example*"/>
        </fileset>
        <fileset dir="@{common.dir.src}/resources/ctp">
          <include name="example*"/>
        </fileset>      
      </copy> 
    

      <ctp-force-qadmin ctp.dir="@{ctp.home}/CTP"/> 
      
      <var name="king.already.exists" unset="true"/>
      <xmltask source="@{ctp.home}/CTP/users.xml" 
               dest="@{ctp.home}/CTP/users.xml"
               report="true">    
        <!-- no xmlcatalog necessary -->
        <copy path="//user[@username='king']/@password" 
              attrValue="true"
              property="king.already.exists"/>
      </xmltask>    
      <echo>is the king here? ${king.already.exists}</echo>
      
      <xmltask source="@{ctp.home}/CTP/users.xml" 
               dest="@{ctp.home}/CTP/users.xml"
               report="true">
        <!-- no xmlcatalog necessary -->
        <insert path="//users" 
                file="@{common.dir.src}/resources/ctp/king.xml.block"
                unless="king.already.exists"/>               
      </xmltask>     
      

      <xmltask source="@{ctp.home}/CTP/users.xml"
               dest="@{ctp.home}/CTP/users.xml"
               report="true">
        <!-- no xmlcatalog necessary -->
        <replace path="//user[@username='admin']/@password" 
                 withtext="@{admin.password}" />           
      </xmltask>  

      <xmltask source="@{ctp.home}/CTP/users.xml" 
               dest="@{ctp.home}/CTP/users.xml"
               report="true">
        <!-- no xmlcatalog necessary -->
        <replace path="//user[@username='king']/@password" 
                 withtext="@{king.password}" />
      </xmltask>
    
    </sequential>
    
  </macrodef>
  
  <macrodef name="configure-filesender">
    <attribute name="ctp.client.home" default="${ctp.client.home}"/>
    <attribute name="ctp.client.http.import.service.port" default="${ctp.client.http_import_service.port}"/>
    <sequential>    
        
           
      <replaceregexp file="@{ctp.client.home}/FileSender/FileSender.properties" 
                     byline="true"
                     match="^\s*directory\s*=(.*)$"
                     replace="directory="/>
      <replaceregexp file="@{ctp.client.home}/FileSender/FileSender.properties" 
                     byline="true"
                     match="^\s*destination\[0\]\s*=(.*)$"
                     replace="destination[0]=https://localhost:@{ctp.client.http.import.service.port}/"/>                   

      <echo file="@{ctp.client.home}/FileSender/filesender.bat"
            message="java -Xmx512m -jar FileSender.jar" />    

      <echo file="@{ctp.client.home}/FileSender/filesender.sh">
        <![CDATA[
  #!/bin/sh
  java -Xmx512m -jar FileSender.jar
          ]]>
      </echo>   
    </sequential>  
  </macrodef>  
  
<!-- 
    this marcrodef relies upon bda 0.7+ being available
    so that groovy and HttpClient are in the classpath.
    This does a POST to the CTP server to shut it down.
    -->
  <macrodef name="ctp-shutdown">
    <attribute name="hostAndPort"/>
    <attribute name="adminPassword"/>
    <sequential>
    <groovy>
      <arg line="@{hostAndPort} @{adminPassword}"/>
      <![CDATA[
      import org.apache.commons.httpclient.Header;
      import org.apache.commons.httpclient.HttpClient;
      import org.apache.commons.httpclient.HttpMethod;
      import org.apache.commons.httpclient.HttpStatus;
      import org.apache.commons.httpclient.methods.GetMethod;
      import org.apache.commons.httpclient.methods.PostMethod;

      httpClient = new HttpClient();
      println httpClient;

      ctpHost = args[0];
      adminPassword = args[1];
      println ctpHost;
      
      loginPostMethod = new PostMethod("http://"+ctpHost+"/login");
      loginPostMethod.addParameter("username","king");
      loginPostMethod.addParameter("password",adminPassword);

      //302 is fine, ignore it
      try {
          loginPostStatusCode = httpClient.executeMethod(loginPostMethod);
          println("login status code: " + loginPostMethod.getStatusLine());

          cookieHeader = loginPostMethod.getResponseHeader("Set-Cookie");        
          if(cookieHeader==null) {
              println("There was no cookie returned by the CTP server so it could not be shutdown.  Please make sure the king password in the properties reflects the existing password instead of a new password.");              
              println("If this problem is persistent, please manually kill the CTP server process and then try the install/upgrade.");
              System.exit(1);
          }
          cookieHeaderValue = cookieHeader.getValue();
          //assert(cookieHeaderValue=="CTPSESSION=value")
          println("cookie:"+cookieHeaderValue);

          shutdownPostMethod = new GetMethod("http://"+ctpHost+"/shutdown");
          shutdownPostMethod.setRequestHeader("Cookie", cookieHeaderValue);

          shutdownGetStatusCode = httpClient.executeMethod(shutdownPostMethod);
          if (shutdownGetStatusCode != HttpStatus.SC_OK) {
              println("Method failed: " + shutdownPostMethod.getStatusLine());
          }
      }
      catch(Exception ex) {
          println "Trouble shutting down CTP.  This could be fine if isn't running in the first place!";
          println ex;
      }
      ]]>
    </groovy>   
    </sequential>
  </macrodef>

  <!-- side effect: sets property specified by ctp.password.property.name attribute/argument -->
  <macrodef name="ctp-read-password">
    <attribute name="ctp.password.file"/>
    <attribute name="ctp.password.property.name"/>
    
    <sequential>  
      <var name="@{ctp.password.property.name}.read" unset="true"/>
      
      <xmltask source="@{ctp.password.file}"
               dest="@{ctp.password.file}">
        <!-- no xmlcatalog necessary -->               
        <copy path="//user[@username='admin']/@password" 
              property="@{ctp.password.property.name}.read"
              attrValue="true"/>            
      </xmltask>      
      
      <if>
        <isset property="@{ctp.password.property.name}.read"/>      
        <then>
          <property name="@{ctp.password.property.name}" value="${@{ctp.password.property.name}.read}"/>
        </then>
      </if>  
    </sequential>
  </macrodef>
  
  <!-- side effect: sets properties for ctp server ports -->
  <macrodef name="ctp-read-server-config">
    <attribute name="ctp.config.file" default="${ctp.server.home}/CTP/config.xml" />

    <sequential>  
    
      <var name="ctp.server.port.read" unset="true"/>
      <var name="ctp.server.http_import_service.port.read" unset="true"/>
      <var name="ctp.server.storage_service.root.read" unset="true"/>     
      <var name="ctp.server.storage_service.index.read" unset="true"/>
      <var name="ctp.server.require_authentication.read" unset="true"/>
      <var name="ctp.server.verifier.port.read" unset="true"/>
      
      <xmltask source="@{ctp.config.file}"
               dest="@{ctp.config.file}">
        <!-- no xmlcatalog necessary -->               
        <copy path="//Server/@port" 
              property="ctp.server.port.read"
              attrValue="true"/>
        <copy path="//ImportService[@class='org.rsna.ctp.stdstages.HttpImportService']/@port" 
              property="ctp.server.http_import_service.port.read"
              attrValue="true"/>
        <copy path="//ImportService[@class='org.rsna.ctp.stdstages.HttpImportService']/@requireAuthentication" 
              property="ctp.server.require_authentication.read"
              attrValue="true"/>              
        <copy path="//StorageService/@root" 
              property="ctp.server.storage_service.root.read"
              attrValue="true"/>
        <copy path="//StorageService/@index" 
              property="ctp.server.storage_service.index.read"
              attrValue="true"/>  
        <copy path="//ExportService[@adapterClass='gov.nih.nci.ncia.dbadapter.NCIADatabase']/@port" 
              property="ctp.server.verifier.port.read"
              attrValue="true"/>                                                          
      </xmltask>      
      
      <if>
        <isset property="ctp.server.verifier.port.read"/>      
        <then>      
          <property name="ctp.server.verifier.port" value="${ctp.server.verifier.port.read}"/>
        </then>
      </if>
      
      <if>
        <isset property="ctp.server.port.read"/>      
        <then>      
          <property name="ctp.server.port" value="${ctp.server.port.read}"/>
        </then>
      </if>

      <if>
        <isset property="ctp.server.http_import_service.port.read"/>      
        <then>      
          <property name="ctp.server.http_import_service.port" value="${ctp.server.http_import_service.port.read}"/>
        </then>
      </if>
      
      <if>
        <isset property="ctp.server.require_authentication.read"/>      
        <then>      
          <property name="ctp.server.require_authentication" value="${ctp.server.require_authentication.read}"/>
        </then>
      </if>      
      
      <if>
        <isset property="ctp.server.storage_service.root.read"/>      
        <then>      
          <property name="ctp.server.storage_service.root" value="${ctp.server.storage_service.root.read}"/>      
        </then>
      </if>
      
      <if>
        <isset property="ctp.server.storage_service.index.read"/>     
        <then>      
          <property name="ctp.server.storage_service.index" value="${ctp.server.storage_service.index.read}"/>      
        </then>
      </if>     
      
    </sequential>
  </macrodef>
        
  <!-- side effect: sets properties for ctp client ports -->      
  <macrodef name="ctp-read-client-config">
    <attribute name="ctp.config.file" default="${ctp.client.home}/CTP/config.xml" />

    <sequential>  
    
      <var name="ctp.client.port.read" unset="true"/>
      <var name="ctp.client.http_import_service.port.read" unset="true"/>  
      <var name="ctp.client.dicom_import_service.port.read" unset="true"/>  
      <var name="ctp.client.export_service.url.read" unset="true"/>
      
      <xmltask source="@{ctp.config.file}"
               dest="@{ctp.config.file}">
        <!-- no xmlcatalog necessary -->
        <copy path="//Server/@port" 
              property="ctp.client.port.read" 
              attrValue="true"/>
        <copy path="//ImportService[@class='org.rsna.ctp.stdstages.HttpImportService']/@port"  
              property="ctp.client.http_import_service.port.read"
              attrValue="true"/>
        <copy path="//ImportService[@class='org.rsna.ctp.stdstages.DicomImportService']/@port"  
              property="ctp.client.dicom_import_service.port.read"
              attrValue="true"/>              
        <copy path="//ExportService[@class='org.rsna.ctp.stdstages.HttpExportService']/@url" 
              property="ctp.client.export_service.url.read"
              attrValue="true"/> 
      </xmltask>      
      
      
      <if>
        <isset property="ctp.client.port.read"/>      
        <then>      
          <property name="ctp.client.port" value="${ctp.client.port.read}"/>
        </then>
      </if>
      
      <if>
        <isset property="ctp.client.http_import_service.port.read"/>      
        <then>      
          <property name="ctp.client.http_import_service.port" value="${ctp.client.http_import_service.port.read}"/>
        </then>
      </if>
      
      <if>
        <isset property="ctp.client.dicom_import_service.port.read"/>      
        <then>      
          <property name="ctp.client.dicom_import_service.port" value="${ctp.client.dicom_import_service.port.read}"/>
        </then>
      </if>      
      
      <if>
        <and>
          <not>                  
            <isset property="ctp.client.export_service.port"/>
          </not>  
          <isset property="ctp.client.export_service.url.read"/>
        </and>  
        <then>
          <groovy>
            import java.net.URL;
            def urlRead = properties["ctp.client.export_service.url.read"];
            if(urlRead==null) {
                println "Warning: could not real ctp client export service url";
            }
            else {
                def url = new URL(urlRead);
                properties["ctp.client.export_service.port"] = url.port;      
            }    
          </groovy>
        </then>
      </if>
      
    </sequential>
  </macrodef>           
</project>