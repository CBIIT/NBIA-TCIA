	<!--   This is meant to be imported into other projects and not run on its own.    The hosting project must define a variety of properties for these targets to  run correctly:  common.dir  project.lib.dir  classes.to.test.dir  src.java.dir    The hosting project must define some targets that are invoked here:  ivy-settings  -pre-clean  -init    The basedir is the basedir of the  hosting project, not where this "importee" is.    -->
<project name="unittesting" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	
  <!-- set by build file/properties that calls into here -->
	<property name="app.workspace.name" value="software"/>
	<property name="src.test.dir" value="${basedir}/test"/>
	<property name="test.classes.dir" value="${basedir}/test-classes"/>
	<property name="instrumented.dir" value="${basedir}/instrumented"/>
	<property name="cobertura.ser.file" value="${instrumented.dir}/cobertura.ser"/>
	<property name="reports.dir" value="${common.dir}/target/reports"/>
	<property name="junit.reports.dir" value="${reports.dir}/junit"/>
	<property name="cobertura.reports.dir" value="${reports.dir}/cobertura"/>
	<property name="findbugs.conf.dir" value="${project.lib.dir}/test-findbugs"/>
	<!-- realtive to src.java.dir -->
	<property name="inspection.includes" value="**/*.java"/>
	<property name="cobertura.includes" value="gov/nih/nci/ncia/**"/>
	
  <fail unless="classes.to.test.dir" message="must define classes.to.test.dir for unittesting.xml to work.  it's typically same as classes.dir in host build file"/>
	
  <fail unless="common.dir" message="must define common.dir for unittesting.xml to work"/>
	
  <path id="ivy.classpath">
		<fileset dir="${common.dir}/target/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
  <!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
	
  <!-- note: this used to be lib.dir, but it collides with Introduce generated build scripts lib.dir -->
	<fail unless="project.lib.dir" message="must define project.lib.dir for unittesting.xml to work"/>
  
	<path id="project.test.classpath">
		<fileset dir="${project.lib.dir}/test">
			<include name="*.jar"/>
		</fileset>
	</path>
  
	<path id="project.test-findbugs.classpath">
		<fileset dir="${findbugs.conf.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>
  
	<path id="project.compile.classpath">
		<fileset dir="${project.lib.dir}/compile">
			<include name="*.jar"/>
		</fileset>
	</path>
  
	<path id="project.test.pmd.classpath">
		<fileset dir="${project.lib.dir}/test-pmd">
			<include name="*.jar"/>
		</fileset>
	</path>
	
  
  <echo>ci: ${static.analysis} and ${unit.testing}</echo>
	
  <import file="selenium.xml"/>
  
  
	<!-- let ivy-test run so that eclipse will get proper junit jars -->
	<target name="ivy-test" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test"/>
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test"/>
		<move todir="${project.lib.dir}/test/">
			<fileset dir="${project.lib.dir}/test/">
				<include name="*-working@*.jar"/>
			</fileset>
			<mapper type="regexp" from="^(.*)\-working\@(.*)\.jar$" to="\1.jar"/>
		</move>
	</target>
  
	<target name="ivy-test-pmd" if="static.analysis" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd"/>
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd"/>
	</target>
  
	<target name="ivy-test-findbugs" if="static.analysis" depends="ivy-settings">
		<ivy:resolve refresh="true" conf="test-findbugs"/>
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-findbugs"/>
	</target>
  
	<target name="post-clean-test" if="unit.testing">
		<delete dir="${instrumented.dir}" quiet="false"/>
		<delete dir="${test.classes.dir}" quiet="false"/>
	</target>
  
	<!-- a little hacky to depend on init-static-analysis target, but these would both be executed from the same place, but need to       separate -->
	<target name="init-test" if="unit.testing" depends="init-static-analysis">
		<mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${instrumented.dir}"/>
		<mkdir dir="${junit.reports.dir}"/>
		<mkdir dir="${project.lib.dir}/test/plugin"/>
	</target>
  
	<target name="init-static-analysis" if="static.analysis">
		<mkdir dir="${reports.dir}/javancss"/>
		<mkdir dir="${reports.dir}/checkstyle"/>
		<mkdir dir="${reports.dir}/pmd"/>
		<mkdir dir="${reports.dir}/findbugs"/>
		<mkdir dir="${project.lib.dir}/test/plugin"/>
	</target>
  
	<target name="compile-test" if="unit.testing" depends="-pre-clean, -init, ivy-test" description="Compiles the Java source code">
		<javac srcdir="${src.test.dir}" destdir="${test.classes.dir}" debug="true">
			<classpath refid="project.test.classpath"/>
			<classpath path="${classes.to.test.dir}"/>
			<exclude name="**/*SelenTestCase*.java"/>
		</javac>
		<copy todir="${classes.to.test.dir}">
			<fileset dir="${src.test.dir}" excludes="**/*.java"/>
		</copy>
	</target>
  
	<target name="-findbugs" if="static.analysis" depends="ivy-test-findbugs">
		<taskdef name="findbugs" classpathref="project.test-findbugs.classpath" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
		<!-- better to rebuild manifest according to ivy conf -->
		<copy file="${findbugs.conf.dir}/findbugs-1.3.4.jar" tofile="${findbugs.conf.dir}/findbugs.jar" overwrite="true"/>
		<copy file="${findbugs.conf.dir}/jsr-3.0.5.jar" tofile="${findbugs.conf.dir}/jsr305.jar" overwrite="true"/>
		<copy file="${findbugs.conf.dir}/findbugs-bcel-1.3.4.jar" tofile="${findbugs.conf.dir}/bcel.jar" overwrite="true"/>
		<copy file="${findbugs.conf.dir}/findbugs-dom4j-full-1.3.4.jar" tofile="${findbugs.conf.dir}/dom4j-full.jar" overwrite="true"/>
		<copy file="${findbugs.conf.dir}/coreplugin-1.3.4.jar" tofile="${findbugs.conf.dir}/plugin/coreplugin.jar" overwrite="true"/>
		<!-- reset this per project -->
		<var name="findbugs.auxclasspath" unset="true"/>
		<property name="findbugs.auxclasspath" refid="project.compile.classpath"/>
		<mkdir dir="${reports.dir}/findbugs/${ant.project.name}/target/"/>
		<findbugs home="${findbugs.conf.dir}" output="xml" outputFile="${reports.dir}/findbugs/${ant.project.name}/target/findbugs_${ant.project.name}.xml" effort="max" jvmargs="-Xmx256M">
			<auxClasspath path="${findbugs.auxclasspath}"/>
			<sourcePath path="${src.java.dir}"/>
			<class location="${classes.to.test.dir}"/>
		</findbugs>
		<!--    <findbugs home="${findbugs.conf.dir}"              output="html"              outputFile="${reports.dir}/findbugs/${ant.project.name}/target/findbugs_${ant.project.name}.html"              effort="max"              jvmargs="-Xmx256M"              stylesheet="plain.xsl">                     <auxClasspath path="${findbugs.auxclasspath}" />              <sourcePath path="${src.java.dir}" />      <class location="${classes.to.test.dir}" />    </findbugs>      -->
	</target>
  
	<target name="-java-ncss" if="static.analysis">
		<taskdef name="javancss" classpathref="project.test.classpath" classname="javancss.JavancssAntTask"/>
		<javancss srcdir="${src.java.dir}" 
              includes="${inspection.includes}" 
              generatereport="true" 
              outputfile="${reports.dir}/javancss/javancss_metrics_${ant.project.name}.xml" 
              abortOnFail="true" 
              ccnPerFuncMax="31" 
              format="xml"/>
		<xslt taskname="javancss" in="${reports.dir}/javancss/javancss_metrics_${ant.project.name}.xml" out="${reports.dir}/javancss/javancss_report_${ant.project.name}.html" style="../common/javancss/javancss2methodhtml.xsl"/>
	</target>
  
	<target name="-pmd" if="static.analysis" depends="ivy-test-pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath"/>
		<mkdir dir="${reports.dir}/pmd/${ant.project.name}/target"/>
		<switch value="${ant.project.name}">
			<case value="ncia-web">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<case value="ncia-services-commons">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<case value="ncia-ctp">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<case value="ncia-core-grid-transfer">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<case value="nbia-download-manager">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<case value="nbia-download">
				<var name="pmd.maxRuleViolations" value="0"/>
			</case>
			<default>
				<var name="pmd.maxRuleViolations" value="0"/>
			</default>
		</switch>
		<trycatch>
			<try>
				<pmd shortFilenames="true" 
             maxRuleViolations="${pmd.maxRuleViolations}" 
             rulesetfiles="${common.dir}/common/pmd/pmd-ruleset-basic.xml">
					<formatter type="xml" toFile="${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml"/>
					<fileset dir="${src.java.dir}" includes="${inspection.includes}"/>
				</pmd>
				<copy file="${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml" tofile="/tmp/pmd_out_${ant.project.name}.xml.last"/>
			</try>
			<catch>
				<if>
					<and>
						<os family="unix"/>
						<available file="/tmp/pmd_out_${ant.project.name}.xml.last"/>
					</and>
					<then>
						<exec executable="diff" osfamily="unix" output="${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml.diff">
							<arg line="'${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml' '/tmp/pmd_out_${ant.project.name}.xml.last'"/>
						</exec>
					</then>
				</if>
				<fail message="PMD failed on ${ant.project.name}. See ${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml.diff"/>
			</catch>
		</trycatch>
		<!-- fix up the path names to source files so hudson plugin can find them -->
		<xslt taskname="pmd" 
          in="${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml" 
          out="${reports.dir}/pmd/${ant.project.name}/target/pmd_out2_${ant.project.name}.xml" 
          style="../common/pmd/pmd-plugin-report.xslt">
			<param name="project.name" expression="${app.workspace.name}/${ant.project.name}"/>
		</xslt>
		<delete file="${reports.dir}/pmd/${ant.project.name}/target/pmd_out_${ant.project.name}.xml"/>
		<xslt taskname="pmd" 
          in="${reports.dir}/pmd/${ant.project.name}/target/pmd_out2_${ant.project.name}.xml" 
          out="${reports.dir}/pmd/${ant.project.name}/target/pmd_report_${ant.project.name}.html" 
          style="../common/pmd/pmd-report.xslt"/>
	</target>
  
	<target name="-checkstyle" if="static.analysis">
		<switch value="${ant.project.name}">
			<case value="ncia-web">
				<var name="checkstyle.maxErrors" value="6"/>
			</case>
			<case value="ncia-services-commons">
				<var name="checkstyle.maxErrors" value="0"/>
			</case>
      <case value="nbia-dao">
        <var name="checkstyle.maxErrors" value="1"/>
      </case>      
			<case value="ncia-ctp">
				<var name="checkstyle.maxErrors" value="13"/>
			</case>
			<case value="ncia-core-grid-transfer">
				<var name="checkstyle.maxErrors" value="1"/>
			</case>
			<case value="nbia-download-manager">
				<var name="checkstyle.maxErrors" value="1"/>
			</case>
			<case value="nbia-download">
				<var name="checkstyle.maxErrors" value="0"/>
			</case>
			<default>
				<var name="checkstyle.maxErrors" value="0"/>
			</default>
		</switch>
    
		<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.classpath"/>
		
    <mkdir dir="${reports.dir}/checkstyle/${ant.project.name}/target"/>
		
    <cs:checkstyle config="../common/checkstyle/checkstyle_minimal.xml" 
                   failureProperty="checkstyle.failure" 
                   failOnViolation="false" 
                   maxErrors="${checkstyle.maxErrors}" 
                   maxWarnings="0">
			<formatter type="xml" tofile="${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml"/>
			<fileset dir="${src.java.dir}" includes="${inspection.includes}"/>
		</cs:checkstyle>
		
    <if>
			<not>
				<isset property="checkstyle.failure"/>
			</not>
			<then>
				<copy file="${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml" tofile="/tmp/checkstyle_${ant.project.name}.xml.last"/>
			</then>
		</if>
		<if>
			<and>
				<isset property="checkstyle.failure"/>
				<os family="unix"/>
				<available file="/tmp/checkstyle_${ant.project.name}.xml.last"/>
			</and>
			<then>
				<exec executable="diff" output="${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml.diff">
					<arg line="'${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml' '/tmp/checkstyle_${ant.project.name}.xml.last'"/>
				</exec>
			</then>
		</if>
		<xslt taskname="checkstyle" in="${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml" out="${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_report_${ant.project.name}.html" style="../common/checkstyle/checkstyle-simple.xsl"/>
		<fail if="checkstyle.failure" message="checkstyle failed on ${ant.project.name}. See ${reports.dir}/checkstyle/${ant.project.name}/target/checkstyle_${ant.project.name}.xml.diff"/>
	</target>
  
	<target name="-cobertura-instrument" if="unit.testing" depends="ivy-test" description="Instruments Cobertura test classes">
		<!-- wait to do this until ivy has populated the directory -->
		<taskdef classpathref="project.test.classpath" resource="tasks.properties"/>
		<cobertura-instrument todir="${instrumented.dir}" datafile="${cobertura.ser.file}">
			<fileset dir="${classes.to.test.dir}" includes="${cobertura.includes}"/>
		</cobertura-instrument>
		<!-- copy all resources to instrumented dir.  not sure why not found in classes.dir?? -->
		<copy todir="${instrumented.dir}">
			<fileset dir="${src.java.dir}" excludes="**/*.java"/>
		</copy>
	</target>
  
	<target name="-cobertura-report-html" if="unit.testing" depends="-cobertura-instrument" description="Creates Cobertura report">
		<cobertura-report datafile="${cobertura.ser.file}" format="html" destdir="${cobertura.reports.dir}/${ant.project.name}">
			<fileset dir="${src.java.dir}" includes="${inspection.includes}"/>
		</cobertura-report>
	</target>
  
	<target name="-cobertura-report-xml" if="unit.testing" depends="-cobertura-instrument" description="Creates Cobertura report">
		<cobertura-report datafile="${cobertura.ser.file}" format="xml" destdir="${common.dir}">
			<fileset dir="${src.java.dir}" includes="${inspection.includes}"/>
		</cobertura-report>
		<move file="${common.dir}/coverage.xml" tofile="${common.dir}/coverage-${ant.project.name}.xml"/>
	</target>
  
	<target name="-cobertura-check" if="unit.testing" depends="-cobertura-report-html,-cobertura-report-xml">
		<cobertura-check failureproperty="cobertura.failure" datafile="${cobertura.ser.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="25" totallinerate="30"/>
	</target>
  
	<!-- was depedent upon jar -->
	<target name="inspect" depends="-cobertura-check, -java-ncss, -checkstyle, -pmd" description="Runs various static analysis and code inspection tools">
		<!--      <fail if="cobertura.failure" message="Cobertura test coverage failure." />    -->
	</target>
  
  <target name="patch-for-oracle" if="unit.testing">
    <switch value="${ant.project.name}">

      <case value="ncia-services-commons">
        <patch-hibernate-cfg-direct file="${src.test.dir}/NCIA.csm.new.hibernate.cfg.xml"/>
        
        <patch-properties file="${src.test.dir}/ncia.properties"
                          property.name="database.type"
                          property.value="${database.type}"/>
        <patch-hibernate-properties file="${src.test.dir}/hibernate.properties"/>  
      </case>

      <case value="nbia-dao">      
        <patch-hibernate-cfg-direct file="${src.test.dir}/NCIA.csm.new.hibernate.cfg.xml"/>
        
        <patch-properties file="${src.test.dir}/ncia.properties"
                          property.name="database.type"
                          property.value="${database.type}"/>
        <patch-hibernate-properties file="${src.test.dir}/hibernate.properties"/>                          
      </case>      

      <case value="ncia-ctp">
        <patch-hibernate-properties file="${src.test.dir}/hibernate.properties"/>
      </case>

      <case value="ncia-core-grid-transfer">
        <patch-properties file="${test.resources.dir}/testdb.properties"
                          property.name="dbunit.driver_class"
                          property.value="${database.driver}"/>
        <patch-properties file="${test.resources.dir}/testdb.properties"
                          property.name="dbunit.connection_url"
                          property.value="${database.url}"/>
        <patch-properties file="${test.resources.dir}/testdb.properties"
                          property.name="dbunit.username"
                          property.value="${database.user}"/>
        <patch-properties file="${test.resources.dir}/testdb.properties"
                          property.name="dbunit.password"
                          property.value="${database.password}"/>                         
      </case>
      
      <default/>

    </switch>  
  </target>
  
	<!-- was depedent upon jar -->
	<target name="test"
          if="unit.testing" 
          depends="patch-for-oracle,
                   compile-test,
                   -cobertura-instrument">
               
		<junit printsummary="on" failureproperty="junit.failure" maxmemory="256m">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser.file}"/>
			<classpath location="${instrumented.dir}"/>
			<classpath location="${classes.to.test.dir}"/>
			<classpath location="${test.classes.dir}"/>
			<classpath refid="project.test.classpath"/>
			<formatter type="xml"/>
			<batchtest todir="${junit.reports.dir}" fork="true">
				<fileset dir="${src.test.dir}">
					<exclude name="**/*SelenTestCase*.java"/>
					<include name="**/*TestCase.java"/>
				</fileset>
			</batchtest>
		</junit>
	
	</target>
</project>
