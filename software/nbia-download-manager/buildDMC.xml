<!--
ant -f buildDMC.xml
-->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="StandaloneDMProject" default="run" basedir=".">
	<description>
		Create a executable jar for Standalond Download Manager with Ant build script
	</description>

	<property name="projectName" value="StandaloneDM" />
	<property name="common.dir" value="${basedir}/../" />
	<property name="src.dir" location="src" />
	<property name="build.dir" location="bin" />
	<property name="dist.dir" location="${common.dir}/target/dist/exploded/nbia-download-manager" />
	<property name="dist.lib.dir" location="${common.dir}/target/dist/exploded/nbia-download-manager/lib" />
	<property name="resources.dir" location="resources" />
	<property name="project.lib.dir" value="${common.dir}/target/lib/nbia-download-manager"/>
	<property name="lib.dir" value="${project.lib.dir}/compile" />
	<property name="global.ivy.settings.file" location="${common.dir}/common/ivysettings.xml"/>
	<!--property name="main-class" value="gov.nih.nci.nbia.StandaloneDM" /-->
	<property name="javac.compilerargs" value="-XDignore.symbol.file=true"/>
	<property name="javafx.run.width" value="800"/>
	<property name="javafx.run.height" value="600"/>
	<property name="package.dir" location="packages"/>
	<property name="application.title" value="TCIA Downloader" />
	<property name="application.vendor" value="NCI, Leidos, Ellumen" />
	<property name="package.resource.dir" location="packageSrc" />
	<property name="package.version" value="2.0" />
	<property name="copyright" value="(c) 2018 NCI, Leidos, Ellumen" />
	<property name="icon.file.name" value="StandaloneDMIcon.ico" />

	<condition property="IS_MAC" value="true" else="false">
		<os family="mac"/>
	</condition>

	<condition property="license.file.name" value="StandaloneDMLicense.txt" else="StandaloneDMLicense.rtf">
		<os family="mac"/>
	</condition>

	<condition property="javafx.main.class" value="gov.nih.nci.nbia.StandaloneDMForMac" else="gov.nih.nci.nbia.StandaloneDMDispatcher">
		<os family="mac"/>
	</condition>
	
	<condition property="excludes" value="gov/nih/nci/nbia/StandaloneDMForMac.java">
		<not>
			<os family="mac"/>
		</not>
	</condition>
	
	<!--condition property="native.bundles" value="all" else="rpm"-->
	<condition property="native.bundles" value="all" else="deb">
		<or>
			<os family="mac"/>
			<os family="windows"/>
		</or>	
	</condition>		
	
	<condition property="icon.file.name" value="TCIA Downloader.ico">
			<os family="windows"/>
	</condition>
	
	<condition property="icon.file.name" value="TCIA Downloader.icns">
			<os family="mac"/>
	</condition>
	
	<condition property="icon.file.name" value="TCIA Downloader.png">
			<os family="unix"/>
	</condition>	

	<path id="common.classpath">
		<fileset dir="${common.dir}/target/lib">
			<include name="ivy-*.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="common.classpath" />

	<!-- Targets -->
	<target name="ivy-settings">
		<ivy:settings file="${global.ivy.settings.file}"/>
	</target>

	<!-- ivy start -->
	<target name="ivy-compile" depends="ivy-settings">
		<ivy:resolve file="ivy.xml"
                 conf="compile" />
		<ivy:retrieve conf="compile" 
                  pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" />

		<move todir="${project.lib.dir}/compile">
			<fileset dir="${project.lib.dir}/compile">
				<include name="*-working@*.jar"/>
			</fileset>
			<mapper type="regexp" 
              from="^(.*)\-working\@(.*)\.jar$" 
              to="\1.jar"/>
		</move>
	</target>

	<target name="ivy-runtime" depends="ivy-settings">
		<ivy:resolve file="ivy.xml"
                 conf="runtime" />
		<ivy:retrieve conf="runtime" 
                  pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" />

		<move todir="${project.lib.dir}/runtime">
			<fileset dir="${project.lib.dir}/runtime">
				<include name="*-working@*.jar"/>
			</fileset>
			<mapper type="regexp" 
        from="^(.*)\-working\@(.*)\.jar$" 
        to="\1.jar"/>
		</move>
	</target>

	<target name="getMacLib" if="IS_MAC">
		<copy file="${java.home}/lib/rt.jar" toDir="${project.lib.dir}/compile"/>
		<copy file="${java.home}/lib/rt.jar" toDir="${project.lib.dir}/runtime"/>
	</target>

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<path id="project.compile.classpath">
		<fileset dir="${project.lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Need project.compile.classpath to run this -->
	<target name="compile" depends="init, ivy-compile, getMacLib" description="compile the source ">
		<echo>Exclude file: ${excludes}</echo>
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}"  excludes="${excludes}">
			<classpath refid="project.compile.classpath"/>
		</javac>
	</target>

	<!-- Group all dependencies into a big dependency-all.jar -->
	<target name="copy-dependencies" depends="ivy-runtime">

		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.lib.dir}/dependencies-all.jar">
			<zipgroupfileset dir="${project.lib.dir}/runtime">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>

	</target>

	<!-- jar it, extract above dependency-all.jar and zip it with project files -->
	<target name="jar" depends="compile, copy-dependencies"
                description="package, output to JAR">
		<condition property="main-class" value="gov.nih.nci.nbia.StandaloneDMDispatcher" else="gov.nih.nci.nbia.StandaloneDMForMac">
			<not>
				<os family="mac"/>
			</not>
		</condition>
		<copy todir="${build.dir}" filtering="true">
			<fileset dir="${resources.dir}" includes="**/*.properties" />
		</copy>
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar"
                                excludes="META-INF/*.SF" />
		</jar>

	</target>

	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="cleanPackage" description="clean up package directory before making new installer">
		<delete dir="${package.dir}" quiet="false" />
	</target>

	<!-- Default, run this -->
	<target name="run" depends="clean, compile, jar" />

	<target xmlns:fx="javafx:com.sun.javafx.tools.ant" name="package" depends="clean, cleanPackage, jar">
		<taskdef resource="com/sun/javafx/tools/ant/antlib.xml" uri="javafx:com.sun.javafx.tools.ant" classpath="${java.home}/../lib/ant-javafx.jar;packageSrc" />
		<fx:deploy width="${javafx.run.width}" height="${javafx.run.height}" nativeBundles="${native.bundles}" outdir="${package.dir}" outfile="${application.title}" verbose="true">

			<fx:application id="standaloneDMApp" name="${application.title}" mainClass="${javafx.main.class}" version="${package.version}">
				<fx:argument>sample.tcia</fx:argument>
			</fx:application>

			<fx:resources>
				<fx:fileset dir="${dist.dir}" includes="*.jar" />
				<fx:fileset dir="${package.resource.dir}" type="license" includes="${license.file.name}" />
				
				<!--fx:fileset dir="${package.resource.dir}" os="unix" type="icon" includes="${icon.file.name}.png" />
				<fx:fileset dir="${package.resource.dir}" os="unix" type="icon" includes="${icon.file.name}.icns" /-->
			</fx:resources>
			
			<fx:info title="${application.title}" vendor="${application.vendor}" category="Research" copyright="${copyright}" license="3 Clause BSD">
				<fx:association extension="tcia" mimetype="application/x-nbia-manifest-file" description="Manifest file for Downloader App" icon="${icon.file.name}">
				</fx:association>
				<fx:icon href="${icon.file.name}"  kind="default" width="32" height="32" depth="8"/>
			</fx:info>
			
            <fx:bundleArgument arg="win.exe.systemWide" value="true"/>

            <fx:bundleArgument arg="linux.bundleName" value="TCIADownloader"/>
            <fx:bundleArgument arg="email" value="panq@mail.nih.gov"/>
            <fx:bundleArgument arg="mac.CFBundleName" value="TCIADownloader"/>
            <fx:bundleArgument arg="win.menuGroup" value="TCIADownloader"/>

		</fx:deploy>
	</target>

</project>
